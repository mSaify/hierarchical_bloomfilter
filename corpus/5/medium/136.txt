
# User Datagram Protocol

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

The User Datagram Protocol (UDP) is one of the core members of the Internet
Protocol Suite, the set of network protocols used for the Internet. With UDP,
computer applications can send messages, in this case referred to as
datagrams, to other hosts on an Internet Protocol (IP) network without
requiring prior communications to set up special transmission channels or data
paths. UDP is sometimes called the Universal Datagram Protocol. The protocol
was designed by David P. Reed in 1980 and formally defined in RFC 768.

UDP uses a simple transmission model without implicit hand-shaking dialogues
for guaranteeing reliability, ordering, or data integrity. Thus, UDP provides
an unreliable service and datagrams may arrive out of order, appear
duplicated, or go missing without notice. UDP assumes that error checking and
correction is either not necessary or performed in the application, avoiding
the overhead of such processing at the network interface level. Time-sensitive
applications often use UDP because dropping packets is preferable to using
delayed packets. If error correction facilities are needed at the network
interface level, an application may use the Transmission Control Protocol
(TCP) or Stream Control Transmission Protocol (SCTP) which are designed for
this purpose.

UDP's stateless nature is also useful for servers that answer small queries
from huge numbers of clients. Unlike TCP, UDP is compatible with packet
broadcast (sending to all on local network) and multicasting (send to all
subscribers).

Common network applications that use UDP include: the Domain Name System
(DNS), streaming media applications such as IPTV, Voice over IP (VoIP),
Trivial File Transfer Protocol (TFTP) and many online games.

The Internet Protocol Suite  
Application Layer  
BGP Â· DHCP Â· DNS Â· FTP Â· GTP Â· HTTP Â· IMAP Â· IRC Â· Megaco Â· MGCP Â·
NNTP Â· NTP Â· POP Â· RIP Â· RPC Â· RTP Â· RTSP Â· SDP Â· SIP Â· SMTP Â· SNMP
Â· SOAP Â· SSH Â· Telnet Â· TLS/SSL Â· XMPP Â· (more)  
Transport Layer  
TCP Â· UDP Â· DCCP Â· SCTP Â· RSVP Â· ECN Â· (more)  
Internet Layer  
IP (IPv4, IPv6) Â· ICMP Â· ICMPv6 Â· IGMP Â· IPsec Â· (more)  
Link Layer  
ARP Â· RARP Â· NDP Â· OSPF Â· Tunnels (L2TP) Â· Media Access Control
(Ethernet, MPLS, DSL, ISDN, FDDI) Â· Device Drivers Â· (more)  
This box: view â¢ talk â¢ edit  
## Contents

  * 1 Ports
  * 2 Packet structure
  * 3 Voice and Video Traffic
  * 4 Difference between TCP and UDP
  * 5 See also
  * 6 References
  * 7 Further reading
  * 8 External links

  
## [edit] Ports

Main article: List of TCP and UDP port numbers

UDP applications use datagram sockets to establish host-to-host
communications. Sockets bind the application to service ports that function as
the endpoints of data transmission. A port is a software structure that is
identified by the port number, a 16 bit integer value, allowing for port
numbers between 0 and 65,535. Port 0 is reserved, but is a permissible source
port value if the sending process does not expect messages in response.

Ports 1 through 1023 (hexadecimal 0x3FF) are named "well-known" ports and on
Unix-like operating systems, binding to one of these ports requires superuser
(root) access.

Ports 1024 through 49,151 (0xBFFF) are registered ports.

Ports 49,152 through 65,535 (0xFFFF) are used as temporary ports primarily by
clients when communicating to servers.

## [edit] Packet structure

UDP is a minimal message-oriented Transport Layer protocol that is documented
in IETF RFC 768.

In the Internet Protocol Suite, UDP provides a very simple interface between
the Internet Layer below (e.g., IPv4) and the Application Layer above.

UDP provides no guarantees to the upper layer protocol for message delivery
and a UDP sender retains no state on UDP messages once sent (for this reason
UDP is sometimes called the Unreliable Datagram Protocol). UDP adds only
application multiplexing and checksumming of the header and payload. If any
kind of reliability for the information transmitted is needed, it must be
implemented in upper layers.

+ Bits 0 - 15 16 - 31  
0 Source Port Destination Port  
32 Length Checksum  
64  
Data  
  
The UDP header consists of only 4 fields. The use of two of those is optional
(pink background in table).

Source port

    This field identifies the sending port when meaningful and should be assumed to be the port to reply to if needed. If not used, then it should be zero.
Destination port

    This field identifies the destination port and is required.
Length

    A 16-bit field that specifies the length in bytes of the entire datagram: header and data. The minimum length is 8 bytes since that's the length of the header. The field size sets a theoretical limit of 65,535 bytes (8 byte header + 65527 bytes of data) for a UDP datagram. The length includes the UDP header, so the minimum size for a UDP datagram is 8 (8 byte header with no data). The practical limit for the data length which is imposed by the underlying IPv4 protocol is 65,507 bytes.
Checksum

    The 16-bit checksum field is used for error-checking of the header and data.
    
With IPv4

    
    When UDP runs over IPv4, the method used to compute the checksum is defined within RFC 768:
    
    
    Checksum is the 16-bit one's complement of the one's complement sum of a pseudo header of information from the IP header, the UDP header, and the data, padded with zero octets at the end (if necessary) to make a multiple of two octets.
    
    In other words, all 16-bit words are summed together using one's complement (with the checksum field set to zero). The sum is then one's complemented. This final value is then inserted as the checksum field. Algorithmically speaking, this is the same as for IPv6.
    
    The difference is in the data used to compute the checksum. Included is a pseudo-header that contains information from the IPv4 header:
+ Bits 0 - 7 8 - 15 16 - 23 24 - 31  
0 Source address  
32 Destination address  
64 Zeros Protocol UDP length  
96 Source Port Destination Port  
128 Length Checksum  
160  
Data  
  
    
    The source and destination addresses are those in the IPv4 header. The protocol is that for UDP (see List of IP protocol numbers): 17. The UDP length field is the length of the UDP header and data.
    
    If the checksum is calculated to be zero (all 0s) it should be sent as negative zero (all 1's). If a checksum is not used it should be sent as zero (all 0s) as zero indicates an unused checksum.
    
With IPv6

    When UDP runs over IPv6, the checksum is no longer considered optional, and the method used to compute the checksum is changed, as per RFC 2460:
    
    
    Any transport or other upper-layer protocol that includes the addresses from the IP header in its checksum computation must be modified for use over IPv6, to include the 128-bit IPv6 addresses instead of 32-bit IPv4 addresses.
    
    When computing the checksum, a pseudo-header that mimics the IPv6 header is included:
+ Bits 0 - 7 8 - 15 16 - 23 24 - 31  
0 Source address  
32  
64  
96  
128 Destination address  
160  
192  
224  
256 UDP length  
288 Zeros Next Header  
320 Source Port Destination Port  
352 Length Checksum  
384  
Data  
  
    
    The source address is the one in the IPv6 header. The destination address is the final destination; if the IPv6 packet doesn't contain a Routing header, that will be the destination address in the IPv6 header; otherwise, at the originating node, it will be the address in the last element of the Routing header, and, at the receiving node, it will be the destination address in the IPv6 header. The Next Header value is the protocol value for UDP: 17. The UDP length field is the length of the UDP header and data.
    
    If the checksum is calculated to be zero (all 0s) it should be sent as negative zero (all 1's).
Lacking reliability, UDP applications must generally be willing to accept some
loss, errors or duplication. Some applications such as TFTP may add
rudimentary reliability mechanisms into the application layer as needed. Most
often, UDP applications do not require reliability mechanisms and may even be
hindered by them. Streaming media, real-time multiplayer games and voice over
IP (VoIP) are examples of applications that often use UDP. If an application
requires a high degree of reliability, a protocol such as the Transmission
Control Protocol or erasure codes may be used instead.

Lacking any congestion avoidance and control mechanisms, network-based
mechanisms are required to minimize potential congestion collapse effects of
uncontrolled, high rate UDP traffic loads. In other words, since UDP senders
cannot detect congestion, network-based elements such as routers using packet
queuing and dropping techniques will often be the only tool available to slow
down excessive UDP traffic. The Datagram Congestion Control Protocol (DCCP) is
being designed as a partial solution to this potential problem by adding end
host TCP-friendly congestion control behavior to high-rate UDP streams such as
streaming media.

While the total amount of UDP traffic found on a typical network is often in
the order of only a few percent, numerous key applications use UDP, including:
the Domain Name System (DNS) (since most DNS queries only consist of a single
request followed by a single reply), the simple network management protocol
(SNMP), the Dynamic Host Configuration Protocol (DHCP) and the Routing
Information Protocol (RIP).

## [edit] Voice and Video Traffic

Voice and video traffic is generally transmitted using UDP. Real-time video
and audio streaming protocols are designed to handle occasional lost packets,
so only slight degradation in quality (if any) occurs rather than large delays
as lost packets are retransmitted. Because both TCP and UDP run over the same
network, many businesses are finding that a recent increase in UDP traffic
from these real-time applications is hindering the performance of applications
using TCP, such as point of sale, accounting, and database systems. When TCP
detects packet loss, it will throttle back its data rate usage which allows
the UDP applications to consume even more data rate, worsening the problem.
Since both real-time and business applications are important to businesses,
developing quality of service solutions is crucial.[1]

## [edit] Difference between TCP and UDP

TCP ("Transmission Control Protocol") is a connection-oriented protocol, which
means that upon communication it requires handshaking to set up end-to-end
connection. A connection can be made from client to server, and from then on
any data can be sent along that connection.

  * Reliable â TCP manages message acknowledgment, retransmission and timeout. Many attempts to reliably deliver the message are made. If it gets lost along the way, the server will re-request the lost part. In TCP, there's either no missing data, or, in case of multiple timeouts, the connection is dropped.
  * Ordered â if two messages are sent along a connection, one after the other, the first message will reach the receiving application first. When data packets arrive in the wrong order, the TCP layer holds the later data until the earlier data can be rearranged and delivered to the application.
  * Heavyweight â TCP requires three packets just to set up a socket, before any actual data can be sent. It handles connections, reliability and congestion control. It is a large transport protocol designed on top of IP.
  * Streaming â Data is read as a "stream," with nothing distinguishing where one packet ends and another begins. Packets may be split or merged into bigger or smaller data streams arbitrarily.

UDP is a simpler message-based connectionless protocol. In connectionless
protocols, there is no effort made to set up a dedicated end-to-end
connection. Communication is achieved by transmitting information in one
direction, from source to destination without checking to see if the
destination is still there, or if it is prepared to receive the information.

  * Unreliable â When a message is sent, it cannot be known if it will reach its destination; it could get lost along the way. There is no concept of acknowledgment, retransmission and timeout.
  * Not ordered â If two messages are sent to the same recipient, the order in which they arrive cannot be predicted.
  * Lightweight â There is no ordering of messages, no tracking connections, etc. It is a small transport layer designed on top of IP.
  * Datagrams â Packets are sent individually and are guaranteed to be whole if they arrive. Packets have definite bounds and no split or merge into data streams may exist.

## [edit] See also

  * TCP and UDP port numbers for a partial (growing) listing of ports/services
  * Connectionless protocol
  * UDP flood attack
  * UDP Data Transport
  * UDP Lite, a variant that will deliver packets even if they are malformed
  * Reliable User Datagram Protocol (RUDP)
  * Transmission Control Protocol
  * IP or Internet Protocol, on top of which rests UDP
  * Transport protocol comparison table

## [edit] References

  1. ^ The impact of UDP on Data Applications

## [edit] Further reading

  * RFC 768, "User Datagram Protocol", J. Postel, August 1980

## [edit] External links

  * IANA Port Assignments
  * The Trouble with UDP Scanning (PDF)
  * Breakdown of UDP frame
  * UDP on MSDN Magazine Sockets and WCF
  * UDP connections

Retrieved from "http://en.wikipedia.org/wiki/User_Datagram_Protocol"

Categories: Internet protocols | Internet standards | Transport layer
protocols

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Ø§ÙØ¹Ø±Ø¨ÙØ©
  * Asturianu
  * Bosanski
  * ÐÑÐ»Ð³Ð°ÑÑÐºÐ¸
  * CatalÃ 
  * Äesky
  * Dansk
  * Deutsch
  * ÎÎ»Î»Î·Î½Î¹ÎºÎ¬
  * EspaÃ±ol
  * Esperanto
  * Euskara
  * ÙØ§Ø±Ø³Û
  * FranÃ§ais
  * Galego
  * íêµ­ì´
  * Hrvatski
  * Bahasa Indonesia
  * Ãslenska
  * Italiano
  * ×¢××¨××ª
  * LatvieÅ¡u
  * LietuviÅ³
  * Magyar
  * Bahasa Melayu
  * Nederlands
  * æ¥æ¬èª
  * âªNorsk (bokmÃ¥l)â¬
  * âªNorsk (nynorsk)â¬
  * Polski
  * PortuguÃªs
  * RomÃ¢nÄ
  * Ð ÑÑÑÐºÐ¸Ð¹
  * Shqip
  * Simple English
  * SlovenÄina
  * SlovenÅ¡Äina
  * Ð¡ÑÐ¿ÑÐºÐ¸ / Srpski
  * Suomi
  * Svenska
  * à¹à¸à¸¢
  * Tiáº¿ng Viá»t
  * TÃ¼rkÃ§e
  * Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°
  * Ø§Ø±Ø¯Ù
  * ä¸­æ

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 26 March 2009, at 16:21.
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



