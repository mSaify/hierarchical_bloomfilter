
# Heap (data structure)

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

This article is about heap data structures. For âthe heapâ as a large pool
of unused memory, see Dynamic memory allocation.

<IMG>

<IMG>

Example of a full binary max heap

In computer science, a heap is a specialized tree-based data structure that
satisfies the heap property: if B is a child node of A, then key(A) â¥
key(B). This implies that an element with the greatest key is always in the
root node, and so such a heap is sometimes called a max-heap. (Alternatively,
if the comparison is reversed, the smallest element is always in the root
node, which results in a min-heap.) The several variants of heaps are the
prototypical most efficient implementations of the abstract data type priority
queues. Priority queues are useful in many applications. In particular, heaps
are crucial in several efficient graph algorithms.

The operations commonly performed with a heap are

  * delete-max or delete-min: removing the root node of a max- or min-heap, respectively
  * increase-key or decrease-key: updating a key within a max- or min-heap, respectively
  * insert: adding a new key to the heap
  * merge: joining two heaps to form a valid new heap containing all the elements of both.

Heaps are used in the sorting algorithm heapsort.

## Contents

  * 1 Variants
  * 2 Comparison of theoretic bounds for variants
  * 3 Heap applications
  * 4 Heap implementations
  * 5 See also
  * 6 References

  
## [edit] Variants

  * Binary heap
  * Binomial heap
  * D-ary heap
  * Fibonacci heap
  * Pairing heap
  * Leftist heap
  * Soft heap
  * 2-3 heap
  * Ternary heap
  * Treap
  * Beap
  * Skew heap

## [edit] Comparison of theoretic bounds for variants

The following time complexities[1] are worst-case time for binary and binomial
heaps and amortized time complexity for Fibonacci heap. O(f) gives asymptotic
upper bound and Î(f) is asymptotically tight bound (see Big O notation).
Function names assume a min-heap.

Operation Binary Binomial Fibonacci  
createHeap Î(n) Î(n) Î(n)  
findMin Î(1) Î(log n) or Î(1) Î(1)  
deleteMin Î(log n) Î(log n) O(log n)  
insert Î(log n) O(log n) Î(1)  
decreaseKey Î(log n) Î(log n) Î(1)  
merge Î(n) O(log n) Î(1)  
For pairing heaps the insert and merge operations are conjectured[citation
needed] to be O(1) amortized complexity but this has not yet been proven.
decreaseKey is not O(1) amortized complexity [1] [2]

## [edit] Heap applications

Heaps are a favorite data structure for many applications.

  * Heapsort: One of the best sorting methods being in-place and with no quadratic worst-case scenarios.
  * Selection algorithms: Finding the min, max or both of them, median or even any k-th element in sublinear time[citation needed] can be done dynamically with heaps.
  * Graph algorithms: By using heaps as internal traversal data structures, run time will be reduced by an order of polynomial. Examples of such problems are Prim's minimal spanning tree algorithm and Dijkstra's shortest path problem.

Interestingly, full and almost full binary heaps may be represented in a very
space-efficient way using an array alone. The first (or last) element will
contain the root. The next two elements of the array contain its children. The
next four contain the four children of the two child nodes, etc. Thus the
children of the node at position `n` would be at positions `2n` and `2n+1` in
a one-based array, or `2n+1` and `2n+2` in a zero-based array. This allows
moving up or down the tree by doing simple index computations. Balancing a
heap is done by swapping elements which are out of order. As we can build a
heap from an array without requiring extra memory (for the nodes, for
example), heapsort can be used to sort an array in-place.

One more advantage of heaps over trees in some applications is that
construction of heaps can be done in linear time using Tarjan's algorithm.

## [edit] Heap implementations

  * The C++ Standard Template Library provides the make_heap, push_heap and pop_heap algorithms for binary heaps, which operate on arbitrary random access iterators. It treats the iterators as a reference to an array, and uses the array-to-heap conversion detailed above.

## [edit] See also

  * Heaps at wikibooks
  * Sorting algorithm
  * Fibonacci heap

## [edit] References

Sister project Wikimedia Commons has media related to: Heaps  
  1. ^ Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest (1990): Introduction to algorithms. MIT Press / McGraw-Hill.

v â¢ d â¢ e

Data structures  
Arrays

Associative array  
Lists

Deque â¢ Linked list â¢ Queue â¢ Stack  
Trees

B-tree â¢ Binary search tree â¢ Heap  
Retrieved from "http://en.wikipedia.org/wiki/Heap_(data_structure)"

Categories: Heaps (structure)

Hidden categories: All articles with unsourced statements | Articles with
unsourced statements since November 2007 | Articles with unsourced statements
since January 2009

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Äesky
  * Deutsch
  * EspaÃ±ol
  * FranÃ§ais
  * íêµ­ì´
  * Ãslenska
  * Italiano
  * ×¢××¨××ª
  * LietuviÅ³
  * Nederlands
  * æ¥æ¬èª
  * âªNorsk (bokmÃ¥l)â¬
  * Polski
  * PortuguÃªs
  * Ð ÑÑÑÐºÐ¸Ð¹
  * SlovenÄina
  * SlovenÅ¡Äina
  * Suomi
  * Svenska
  * à¹à¸à¸¢
  * TÃ¼rkÃ§e
  * Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°
  * ä¸­æ

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 29 March 2009, at 02:27.
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



