
# Data structure alignment

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

<IMG>

This article needs additional citations for verification. Please help improve
this article by adding reliable references (ideally, using inline citations).
Unsourced material may be challenged and removed. (March 2009)  
Data structure alignment is the way data is arranged and accessed in computer
memory. It consists of two separate but related issues: data alignment and
data structure padding. When modern computers read from or write to a memory
address, it will do this in word sized chunks (e.g. 4 byte chunks on a 32-bit
system). Data alignment is to put the data at a memory offset equal to some
multiple of the word size, which increases the system's performance due to how
the CPU handles memory. To align the data, it may be necessary to insert some
meaningless bytes between the end of the last data structure and the start of
the next, which is data structure padding.

For example, when the computer's word size is 4 bytes, the data to be read
should be at a memory offset which is some multiple of 4. When this is not the
case, e.g. the data starts at the 14th byte instead of the 16th byte, then the
computer has to read two 4-byte chunks and do some calculation before the
requested data has been read, or it may generate an alignment fault. Even
though the previous data structure ends at the 14th byte, the next data
structure should start at the 16th byte. Two padding bytes are inserted
between the two data structures to align the next data structure to the 16th
byte.

Although data structure alignment is a fundamental issue for all modern
computers, many computer languages and computer language implementations
handle data alignment automatically. Certain C and C++ implementations and
assembly language allow at least partial control of data structure padding,
which may be useful in certain special circumstances.

## Contents

  * 1 Definitions
  * 2 Problems
  * 3 Architectures
    * 3.1 RISC
    * 3.2 x86 and x86-64
    * 3.3 Compatibility
  * 4 Data Structure Padding
    * 4.1 Computing padding
  * 5 Typical alignment of C structs on x86
    * 5.1 Default packing and #pragma pack
  * 6 Allocating memory aligned to cache lines
  * 7 References
  * 8 See also
  * 9 External links

  
## [edit] Definitions

A memory address a, is said to be n-byte aligned when n is a power of two and
a is a multiple of n bytes. In this context a byte is the smallest unit of
memory access, i.e. each memory address specifies a different byte. An n-byte
aligned address would have log2 n least-significant zeros when expressed in
binary.

A memory access is said to be aligned when the datum being accessed is n bytes
long and the datum address is n-byte aligned. When a memory access is not
aligned, it is said to be misaligned. Note that by definition byte memory
accesses are always aligned.

A memory pointer that refers to primitive data that is n bytes long is said to
be aligned if it is only allowed to contain addresses that are n-byte aligned,
otherwise it is said to be unaligned. A memory pointer that refers to a data
aggregate (a data structure or array) is aligned if (and only if) each
primitive datum in the aggregate is aligned.

Note that the definitions above assume that each primitive datum is a power of
two bytes long. When this is not the case (as with 80-bit floating-point on
x86) the context influences the conditions where the datum is considered
aligned or not.

## [edit] Problems

A computer accesses memory a single memory word at a time. As long as the
memory word size is at least as large as the largest primitive data type
supported by the computer, aligned accesses will always access a single memory
word. This may not be true for misaligned data accesses.

If the highest and lowest bytes in a datum are not within the same memory word
the computer must split the datum access into multiple memory accesses. This
requires a lot of complex circuitry to generate the memory accesses and
coordinate them. To handle the case where the memory words are in different
memory pages the processor must either verify that both pages are present
before executing the instruction or be able to handle a TLB miss or a page
fault on any memory access during the instruction execution.

When a single memory word is accessed the operation is atomic, i.e. the whole
memory word is read or written at once and other devices must wait until the
read or write operation completes before they can access it. This may not be
true for unaligned accesses to multiple memory words, e.g. the first word
might be read by one device, both words written by another device and then the
second word read by the first device so that the value read is neither the
original value nor the updated value. Although such failures are rare, they
can be very difficult to identify.

## [edit] Architectures

### [edit] RISC

Most RISC processors will generate an alignment fault when a load or store
instruction accesses a misaligned address. This allows the operating system to
emulate the misaligned access using other instructions. For example, the
alignment fault handler might use byte loads or stores (which are always
aligned) to emulate a larger load or store instruction.

Some architectures like MIPS have special unaligned load and store
instructions. One unaligned load instruction gets the bytes from the memory
word with the lowest byte address and another gets the bytes from the memory
word with the highest byte address. Similarly, store-high and store-low
instructions store the appropriate bytes in the higher and lower memory words
respectively.

The DEC Alpha architecture has a two-step approach to unaligned loads and
stores. The first step is to load the upper and lower memory words into
separate registers. The second step is to extract or modify the memory words
using special low/high instructions similar to the MIPS instructions. An
unaligned store is completed by storing the modified memory words back to
memory. The reason for this complexity is that the original Alpha architecture
could only read or write 32-bit or 64-bit values. This proved to be a severe
limitation that often led to code bloat and poor performance. Later Alpha
processors added byte and double-byte load and store instructions.

Because these instructions are larger and slower than the normal memory load
and store instructions they should only be used when necessary. Most C and C++
compilers have an âunalignedâ attribute that can be applied to pointers
that need the unaligned instructions.

### [edit] x86 and x86-64

While the x86 architecture originally did not require aligned memory access
and still works without it, SSE2 and x86-64 instructions on x86 CPUs do
require the data to be 128-bit (16-byte) aligned and there can be substantial
performance advantages from using aligned data on these architectures.

### [edit] Compatibility

The advantage to supporting unaligned access is that it is easier to write
compilers that do not need to align memory, at the expense of the cost of
slower access. One way to increase performance in RISC processors which are
designed to maximize raw performance is to require data to be loaded or stored
on a word boundary. So though memory is commonly addressed by 8 bit bytes,
loading a 32 bit integer or 64 bit floating point number would be required to
be start at every 64 bits on a 64 bit machine. The processor could flag a
fault if it were asked to load a number which was not on such a boundary, but
this would result in a slower call to a routine which would need to figure out
which word or words contained the data and extract the equivalent value.

## [edit] Data Structure Padding

Although the compiler (or interpreter) normally allocates individual data
items on aligned boundaries, data structures often have members with different
alignment requirements. To maintain proper alignment the translator normally
inserts additional unnamed data members so that each member is properly
aligned. In addition the data structure as a whole may be padded with a final
unnamed member. This allows each member of an array of structures to be
properly aligned.

Padding is only inserted when a structure member is followed by a member with
a larger alignment requirement or at the end of the structure. By changing the
ordering of members in a structure, it is possible to change the amount of
padding required to maintain alignment. For example, if members are sorted by
ascending or descending alignment requirements a minimal amount of padding is
required. The minimal amount of padding required is always less than the
largest alignment in the structure. Computing the maximum amount of padding
required is more complicated, but is always less than the sum of the alignment
requirements for all members minus twice the sum of the alignment requirements
for the least aligned half of the structure members.

Although C and C++ do not allow the compiler to reorder structure members to
save space, other languages might. It is also possible to tell most C and C++
compilers to "pack" the members of a structure to a certain level of
alignment, e.g. "pack(2)" means align data members larger than a byte to a
two-byte boundary so that any padding members are at most one byte long.

One use for such "packed" structures is to conserve memory. For example, a
structure containing a single byte and a four-byte integer would require three
additional bytes of padding. A large array of such structures would use 37.5%
less memory if they are packed, although accessing each structure might take
longer. This compromise may be considered a form of space-time tradeoff.

Although use of "packed" structures is most frequently used to conserve memory
space, it may also be used to format a data structure for transmission using a
standard protocol. However in this usage, care must also be taken to ensure
that the values of the struct members are stored with the endianness required
by the protocol (often network byte order), which may be different from the
endianness used natively by the host machine.

### [edit] Computing padding

The following formulas provides the number of padding bytes required to align
the start of a data structure (where mod is the modulo operator):

    
    padding = (align - (offset mod align)) mod align
    new offset = offset + ((align - (offset mod align)) mod align)
    
For example, the padding to add to offset 0x59d for a structure aligned to
every 4 bytes is 3. The structure will then start at 0x5a0, which is a
multiple of 4. Note that when offset already is a multiple of align, taking
the modulo of align - (offset mod align) is required to get a padding of 0.

Or alternatively when the alignment is a power of two, the following formulas
provides the new offset (where & is a bitwise AND and ~ a bitwise NOT):

    
    new offset = align + ((offset - 1) & ~(align - 1))
    padding = (align + ((offset - 1) & ~(align - 1))) - offset
    
## [edit] Typical alignment of C structs on x86

Data structure members are stored sequentially in a memory so that in the
structure below the member Data1 will always precede Data2 and Data2 will
always precede Data3:

    
    struct MyData
    {
        short Data1;
        short Data2;
        short Data3;
    };
    
If the type "short" is stored in two bytes of memory then each member of the
data structure depicted above would be 2-byte aligned. Data1 would be at
offset 0, Data2 at offset 2 and Data3 at offset 4. The size of this structure
would be 6 bytes.

The type of each member of the structure usually has a default alignment,
meaning that it will, unless otherwise requested by the programmer, be aligned
on a pre-determined boundary. The following typical alignments are valid for
compilers from Microsoft, Borland, and GNU when compiling for x86:

  * A char (one byte) will be 1-byte aligned.
  * A short (two bytes) will be 2-byte aligned.
  * An int (four bytes) will be 4-byte aligned.
  * A float (four bytes) will be 4-byte aligned.
  * A double (eight bytes) will be 8-byte aligned on Windows and 4-byte aligned on Linux.

Here is a structure with members of various types, totaling 8 bytes before
compilation:

    
    struct MixedData
    {
        char Data1;
        short Data2;
        int Data3;
        char Data4;
    };
    
After compilation the data structure will be supplemented with padding bytes
to ensure a proper alignment for each of its members:

    
    struct MixedData  /* after compilation */
    {
        char Data1;
        char Padding0[1]; /* For the following 'short' to be aligned on a 2 byte boundary */
        short Data2;
        int Data3;  
        char Data4;
        char Padding1[3];
    };
    
The compiled size of the structure is now 12 bytes. It is important to note
that the last member is padded with the number of bytes required to conform to
the largest type of the structure. In this case 3 bytes are added to the last
member to pad the structure to the size of a long word.

It is possible to change the alignment of structures to reduce the memory they
require (or to conform to an existing format) by changing the compilerâs
alignment (or âpackingâ) of structure members.

Requesting that the MixedData structure above be aligned to a one byte
boundary will have the compiler discard the pre-determined alignment of the
members and no padding bytes would be inserted.

While there is no standard way of defining the alignment of structure members,
some compilers use #pragma directives to specify packing inside source files.
Here is an example:

    
    #pragma pack(push)  /* push current alignment to stack */
    #pragma pack(1)     /* set alignment to 1 byte boundary */
     
    struct MyPackedData
    {
        char Data1;
        long Data2;
        char Data3;
    };
     
    #pragma pack(pop)   /* restore original alignment from stack */
    
This structure would have a compiled size of 6 bytes. The above directives are
available in compilers from Microsoft, Borland, GNU and many others.

### [edit] Default packing and #pragma pack

On MS compilers, there is a relationship between project default packing (the
/Zp directive) and the #pragma pack directive which is unexpected for most
people.

The #pragma pack directive can only be used to reduce the packing size of a
structure from the project default packing. This leads to interoperability
problems with library headers which use for example #pragma pack(8) if you set
a project packing to smaller than this. The MSDN documentation states that if
the #pragma pack packing is larger than or equal to the project packing, it
will be ignored.

For this reason, one should never set a project packing to any value other
than the default of 8 bytes, as it would break the #pragma pack directives
used in library headers and result in binary incompatibilities between
structures.

In particular, setting /Zp1 breaks all #pragma pack directives other than
#pragma pack(1).

## [edit] Allocating memory aligned to cache lines

It would be beneficial to allocate memory aligned to cache lines. If an array
is partitioned for more than one thread to operate on, having the sub-array
boundaries unaligned to cache lines could lead to performance degradation.
Here is an example to allocate memory (double array of size 8) aligned to
cache line of 64 bytes.

    
    #include <stdlib.h>
    int foo () {
       double *var;
       posix_memalign(&var, 64, 8);
    }
    
## [edit] References

  * Bryant, Randal E.; David, O'Hallaron (2003), Computer Systems: A Programmer's Perspective (2003 ed.), Upper Saddle River, NJ: Pearson Education, ISBN 0-13-034074-X, http://csapp.cs.cmu.edu/

## [edit] See also

  * Stride of an array
  * Type punning

## [edit] External links

  * IBM developerWorks article on data alignment
  * MSDN article on data alignment
  * Article on data alignment and data portability
  * Byte Alignment and Ordering
  * Intel Itanium Architecture Software Developer's Manual
  * PowerPC Microprocessor Family: The Programming Environments for 32-Bit Microprocessors

Retrieved from "http://en.wikipedia.org/wiki/Data_structure_alignment"

Categories: Data structures | Compiler theory

Hidden categories: Articles needing additional references from March 2009

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Deutsch
  * FranÃ§ais
  * Ð ÑÑÑÐºÐ¸Ð¹

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 6 April 2009, at 09:12 (UTC).
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



