
# Database model

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

A database model or database schema is the structure or format of a database,
described in a formal language supported by the database management system.
Schemas are generally stored in a data dictionary.

<IMG>

<IMG>

Collage of five types of database models.

Although a schema is defined in text database language, the term is often used
to refer to a graphical depiction of the database structure.[1]

  

## Contents

  * 1 Overview
  * 2 Models
    * 2.1 Flat model
    * 2.2 Hierarchical model
    * 2.3 Network model
    * 2.4 Relational model
    * 2.5 Dimensional model
    * 2.6 Object database models
  * 3 See also
  * 4 References

  
## [edit] Overview

A database model is a theory or specification describing how a database is
structured and used. Several such models have been suggested.

Common models include:

  * Hierarchical model
  * Network model
  * Relational model
  * Entity-relationship
  * Object-relational model
  * Object model

A data model is not just a way of structuring data: it also defines a set of
operations that can be performed on the data. The relational model, for
example, defines operations such as select, project, and join. Although these
operations may not be explicit in a particular query language, they provide
the foundation on which a query language is built.

## [edit] Models

Various techniques are used to model data structure. Most database systems are
built around one particular data model, although it is increasingly common for
products to offer support for more than one model. For any one logical model
various physical implementations may be possible, and most products will offer
the user some level of control in tuning the physical implementation, since
the choices that are made have a significant effect on performance. An example
of this is the relational model: all serious implementations of the relational
model allow the creation of indexes which provide fast access to rows in a
table if the values of certain columns are known.

### [edit] Flat model

<IMG>

<IMG>

Flat File Model.[1]

    This may not strictly qualify as a data model, as defined above.
The flat (or table) model consists of a single, two-dimensional array of data
elements, where all members of a given column are assumed to be similar
values, and all members of a row are assumed to be related to one another. For
instance, columns for name and password that might be used as a part of a
system security database. Each row would have the specific password associated
with an individual user. Columns of the table often have a type associated
with them, defining them as character data, date or time information,
integers, or floating point numbers.

### [edit] Hierarchical model

<IMG>

<IMG>

Hierarchical Model.[1]

Main article: Hierarchical model

In a hierarchical model, data is organized into a tree-like structure,
implying a single upward link in each record to describe the nesting, and a
sort field to keep the records in a particular order in each same-level list.
Hierarchical structures were widely used in the early mainframe database
management systems, such as the Information Management System (IMS) by IBM,
and now describe the structure of XML documents. This structure allows one 1:N
relationship between two types of data. This structure is very efficient to
describe many relationships in the real world; recipes, table of contents,
ordering of paragraphs/verses, any nested and sorted information. However, the
hierarchical structure is inefficient for certain database operations when a
full path (as opposed to upward link and sort field) is not also included for
each record.

One limitation of the hierarchical model is its inability to efficiently
represent redundancy in data. Entity-Attribute-Value database models like
Caboodle by Swink are based on this structure.

Parentâchild relationship: Child may only have one parent but a parent can
have multiple children. Parents and children are tied together by links called
"pointersâ. A parent will have a list of pointers to each of their children.

### [edit] Network model

<IMG>

<IMG>

Network Model.[1]

Main article: Network model

The network model (defined by the CODASYL specification) organizes data using
two fundamental constructs, called records and sets. Records contain fields
(which may be organized hierarchically, as in the programming language COBOL).
Sets (not to be confused with mathematical sets) define one-to-many
relationships between records: one owner, many members. A record may be an
owner in any number of sets, and a member in any number of sets.

The network model is a variation on the hierarchical model, to the extent that
it is built on the concept of multiple branches (lower-level structures)
emanating from one or more nodes (higher-level structures), while the model
differs from the hierarchical model in that branches can be connected to
multiple nodes. The network model is able to represent redundancy in data more
efficiently than in the hierarchical model.

The operations of the network model are navigational in style: a program
maintains a current position, and navigates from one record to another by
following the relationships in which the record participates. Records can also
be located by supplying key values.

Although it is not an essential feature of the model, network databases
generally implement the set relationships by means of pointers that directly
address the location of a record on disk. This gives excellent retrieval
performance, at the expense of operations such as database loading and
reorganization.

Most object databases use the navigational concept to provide fast navigation
across networks of objects, generally using object identifiers as "smart"
pointers to related objects. Objectivity/DB, for instance, implements named
1:1, 1:many, many:1 and many:many named relationships that can cross
databases. Many object databases also support SQL, combining the strengths of
both models.

### [edit] Relational model

<IMG>

<IMG>

Example of a Relational Model.[1]

The relational model was introduced by E. F. Codd in 1970[2] as a way to make
database management systems more independent of any particular application. It
is a mathematical model defined in terms of predicate logic and set theory.

The products that are generally referred to as relational databases in fact
implement a model that is only an approximation to the mathematical model
defined by Codd. Three key terms are used extensively in relational database
models: relations, attributes, and domains. A relation is a table with columns
and rows. The named columns of the relation are called attributes, and the
domain is the set of values the attributes are allowed to take.

The basic data structure of the relational model is the table, where
information about a particular entity (say, an employee) is represented in
columns and rows (also called tuples). Thus, the "relation" in "relational
database" refers to the various tables in the database; a relation is a set of
tuples. The columns enumerate the various attributes of the entity (the
employee's name, address or phone number, for example), and a row is an actual
instance of the entity (a specific employee) that is represented by the
relation. As a result, each tuple of the employee table represents various
attributes of a single employee.

All relations (and, thus, tables) in a relational database have to adhere to
some basic rules to qualify as relations. First, the ordering of columns is
immaterial in a table. Second, there can't be identical tuples or rows in a
table. And third, each tuple will contain a single value for each of its
attributes.

A relational database contains multiple tables, each similar to the one in the
"flat" database model. One of the strengths of the relational model is that,
in principle, any value occurring in two different records (belonging to the
same table or to different tables), implies a relationship among those two
records. Yet, in order to enforce explicit integrity constraints,
relationships between records in tables can also be defined explicitly, by
identifying or non-identifying parent-child relationships characterized by
assigning cardinality (1:1, (0)1:M, M:M). Tables can also have a designated
single attribute or a set of attributes that can act as a "key", which can be
used to uniquely identify each tuple in the table.

A key that can be used to uniquely identify a row in a table is called a
primary key. Keys are commonly used to join or combine data from two or more
tables. For example, an Employee table may contain a column named Location
which contains a value that matches the key of a Location table. Keys are also
critical in the creation of indexes, which facilitate fast retrieval of data
from large tables. Any column can be a key, or multiple columns can be grouped
together into a compound key. It is not necessary to define all the keys in
advance; a column can be used as a key even if it was not originally intended
to be one.

A key that has an external, real-world meaning (such as a person's name, a
book's ISBN, or a car's serial number) is sometimes called a "natural" key. If
no natural key is suitable (think of the many people named Brown), an
arbitrary or surrogate key can be assigned (such as by giving employees ID
numbers). In practice, most databases have both generated and natural keys,
because generated keys can be used internally to create links between rows
that cannot break, while natural keys can be used, less reliably, for searches
and for integration with other databases. (For example, records in two
independently developed databases could be matched up by social security
number, except when the social security numbers are incorrect, missing, or
have changed.)

### [edit] Dimensional model

The dimensional model is a specialized adaptation of the relational model used
to represent data in data warehouses in a way that data can be easily
summarized using OLAP queries. In the dimensional model, a database consists
of a single large table of facts that are described using dimensions and
measures. A dimension provides the context of a fact (such as who
participated, when and where it happened, and its type) and is used in queries
to group related facts together. Dimensions tend to be discrete and are often
hierarchical; for example, the location might include the building, state, and
country. A measure is a quantity describing the fact, such as revenue. It's
important that measures can be meaningfully aggregated - for example, the
revenue from different locations can be added together.

In an OLAP query, dimensions are chosen and the facts are grouped and added
together to create a summary.

The dimensional model is often implemented on top of the relational model
using a star schema, consisting of one table containing the facts and
surrounding tables containing the dimensions. Particularly complicated
dimensions might be represented using multiple tables, resulting in a
snowflake schema.

A data warehouse can contain multiple star schemas that share dimension
tables, allowing them to be used together. Coming up with a standard set of
dimensions is an important part of dimensional modeling.

### [edit] Object database models

<IMG>

<IMG>

Example of a Object-Oriented Model.[1]

Main article: Object-relational model

Main article: Object model

In recent years, the object-oriented paradigm has been applied to database
technology, creating a new programming model known as object databases. These
databases attempt to bring the database world and the application programming
world closer together, in particular by ensuring that the database uses the
same type system as the application program. This aims to avoid the overhead
(sometimes referred to as the impedance mismatch) of converting information
between its representation in the database (for example as rows in tables) and
its representation in the application program (typically as objects). At the
same time, object databases attempt to introduce the key ideas of object
programming, such as encapsulation and polymorphism, into the world of
databases.

A variety of these ways have been tried for storing objects in a database.
Some products have approached the problem from the application programming
end, by making the objects manipulated by the program persistent. This also
typically requires the addition of some kind of query language, since
conventional programming languages do not have the ability to find objects
based on their information content. Others have attacked the problem from the
database end, by defining an object-oriented data model for the database, and
defining a database programming language that allows full programming
capabilities as well as traditional query facilities.

Object databases suffered because of a lack of standardization: although
standards were defined by ODMG, they were never implemented well enough to
ensure interoperability between products. Nevertheless, object databases have
been used successfully in many applications: usually specialized applications
such as engineering databases or molecular biology databases rather than
mainstream commercial data processing. However, object database ideas were
picked up by the relational vendors and influenced extensions made to these
products and indeed to the SQL language.

## [edit] See also

  * Associative
  * Concept-oriented
  * Entity-attribute-value
  * Information model
  * Multi-dimensional model
  * Semantic data model
  * Semi-structured
  * Star schema
  * XML database

## [edit] References

Sister project Wikimedia Commons has media related to: Database models  
  1. ^ a b c d e f Data Integration Glossary, U.S. Department of Transportation, August 2001.
  2. ^ 1970 Paper by E.F. Codd.

v â¢ d â¢ e

Database models  
Models

Flat Â· Hierarchical Â· Dimensional model Â· Network Â· Relational Â· Object-
oriented  
Other models

Associative Â· Concept-oriented Â· Multi-dimensional Â· Semantic Â· Star
schema Â· XML database  
Implementations

Flat file Â· Deductive Â· Document-oriented Â· Object-relational Â· Temporal
Â· XML data stores Â· Triple stores  
v â¢ d â¢ e

Database management systems  
Database models Â· Database normalization Â· Database storage Â· Distributed
DBMS Â· Referential integrity Â· Relational algebra Â· Relational calculus Â·
Relational database Â· Relational DBMS Â· Relational model Â· Object-
relational database Â· Transaction processing  
Concepts

Database Â· ACID Â· CRUD Â· Null Â· Candidate key Â· Foreign key Â· Primary
key Â· Superkey Â· Surrogate key  
Objects

Trigger Â· View Â· Table Â· Cursor Â· Log Â· Transaction Â· Index Â· Stored
procedure Â· Partition  
SQL

Select Â· Insert Â· Update Â· Merge Â· Delete Â· Join Â· Union Â· Create Â·
Drop Â· Begin work Â· Commit Â· Rollback Â· Truncate Â· Alter  
Components

Concurrency control Â· Data dictionary Â· JDBC Â· ODBC Â· Query language Â·
Query optimizer Â· Query plan  
Database products: Object-oriented (comparison) Â· Relational (comparison) Â·
Document-oriented  
v â¢ d â¢ e

Software engineering  
Fields

Requirements analysis â¢ Software design â¢ Computer programming â¢ Formal
methods â¢ Software testing â¢ Software deployment â¢ Software maintenance  
Concepts

Data modeling â¢ Enterprise architecture â¢ Functional specification â¢
Modeling language â¢ Programming paradigm â¢ Software â¢ Software
architecture â¢ Software development methodology â¢ Software development
process â¢ Software quality â¢ Software quality assurance â¢ Structured
analysis  
Orientations

Agile â¢ Aspect-oriented â¢ Object orientation â¢ Ontology â¢ Service
orientation â¢ SDLC  
Models

Development models: Agile â¢ Iterative model â¢ RUP â¢ Scrum â¢ Spiral
model â¢ Waterfall model â¢ XP â¢ V-Model  
Other models: CMMI â¢ Data model â¢ Function model â¢ IDEF â¢ Information
model â¢ Metamodeling â¢ Object model â¢ View model â¢ UML  
Software  
engineers

Kent Beck â¢ Grady Booch â¢ Fred Brooks â¢ Barry Boehm â¢ Ward Cunningham
â¢ Ole-Johan Dahl â¢ Tom DeMarco â¢ Edsger W. Dijkstra â¢ Martin Fowler
â¢ C. A. R. Hoare â¢ Watts Humphrey â¢ Michael A. Jackson â¢ Ivar Jacobson
â¢ Craig Larman â¢ James Martin â¢ Bertrand Meyer â¢ David Parnas â¢
Winston W. Royce â¢ James Rumbaugh â¢ Niklaus Wirth â¢ Edward Yourdon  
Related fields

Computer science â¢ Computer engineering â¢ Enterprise engineering â¢
History â¢ Management â¢ Mathematics â¢ Project management â¢ Quality
management â¢ Software ergonomics â¢ Systems engineering  
Retrieved from "http://en.wikipedia.org/wiki/Database_model"

Categories: Database management systems | Databases | Data modeling | Database
theory

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Ø§ÙØ¹Ø±Ø¨ÙØ©
  * Deutsch
  * Magyar
  * âªNorsk (bokmÃ¥l)â¬
  * EspaÃ±ol

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 28 March 2009, at 00:37 (UTC).
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



