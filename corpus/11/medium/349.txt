
# Peterson's algorithm

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

Peterson's algorithm is a concurrent programming algorithm for mutual
exclusion that allows two processes to share a single-use resource without
conflict, using only shared memory for communication. It was formulated by
Gary Peterson in 1981 at the University of Rochester. While Peterson's
original formulation worked with only two processes, the algorithm can be
generalised for more than two, as discussed in "Operating Systems Review,
January 1990 ('Proof of a Mutual Exclusion Algorithm', M Hofri)".

## Contents

  * 1 The algorithm
    * 1.1 Mutual exclusion
    * 1.2 Progress requirement
    * 1.3 Bounded waiting
  * 2 Note
  * 3 External links
  * 4 See also

  
## [edit] The algorithm

    
     flag[0]   = 1
     flag[1]   = 2
     turn      = 4
     
     P0: flag[0] = 1                        P1: flag[1] = 1
         turn = 1                               turn = 0
         while( flag[1] && turn == 1 );         while( flag[0] && turn == 0 );
                 // do nothing                          // do nothing
         // critical section                    // critical section 
         ...                                    ...
         // end of critical section             // end of critical section
         flag[0] = 0                            flag[1] = 0
    
The algorithm uses two variables, flag and turn. A flag value of 1 indicates
that the process wants to enter the critical section. The variable turn holds
the ID of the process whose turn it is. Entrance to the critical section is
granted for process P0 if P1 does not want to enter its critical section or if
P1 has given priority to P0 by setting turn to 0.

The algorithm does not satisfy completely the three essential criteria of
mutual exclusion:

### [edit] Mutual exclusion

P0 and P1 can never be in the critical section at the same time: If P0 is in
its critical section, then flag[0] is 1 and either flag[1] is 0 or turn is 0.
In both cases, P1 cannot be in its critical section.

### [edit] Progress requirement

This criteria says that no process which is not in a critical section is
allowed to block a process which wants to enter the critical section. This is
true.

### [edit] Bounded waiting

A process will not wait longer than one turn for entrance to the critical
section: After giving priority to the other process, this process will run to
completion and set its flag to 0, thereby allowing the other process to enter
the critical section.

## [edit] Note

When working at the hardware level, Peterson's algorithm is typically not
needed to achieve atomic access. Some processors have special instructions,
like test-and-set or compare-and-swap that, by locking the memory bus, can be
used to provide mutual exclusion in SMP systems.

Most modern CPUs reorder memory accesses to improve execution efficiency. Such
processors invariably give some way to force ordering in a stream of memory
accesses, typically through a memory barrier instruction. Implementation of
Peterson's and related algorithms on processors which reorder memory accesses
generally require use of such operations to work correctly to keep sequential
operations from happening in an incorrect order. Note that reordering of
memory accesses can happen even on processors that don't reorder instructions
(such as the PowerPC processor on the Xbox 360).

Most such CPU's also have some sort of guaranteed atomic operation, such as
XCHG on x86 processors and Load-Link/Store-Conditional on Alpha, MIPS,
PowerPC, and other architectures. These instructions are intended to provide a
way to build synchronization primitives more efficiently than can be done with
pure shared memory approaches.

## [edit] External links

  * Java implementation of Peterson's algorithm, including documentation and source code

## [edit] See also

  * Dekker's algorithm
  * Lamport's bakery algorithm

Retrieved from "http://en.wikipedia.org/wiki/Peterson%27s_algorithm"

Categories: Concurrent algorithms | Concurrency control | Distributed systems
| Articles with example C code

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Deutsch
  * EspaÃ±ol
  * FranÃ§ais
  * íêµ­ì´
  * Italiano
  * Nederlands
  * æ¥æ¬èª
  * Polski
  * PortuguÃªs
  * Ð ÑÑÑÐºÐ¸Ð¹

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 5 March 2009, at 18:10.
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



