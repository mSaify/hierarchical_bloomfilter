
# System call

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

<IMG>

This article needs additional citations for verification. Please help improve
this article by adding reliable references (ideally, using inline citations).
Unsourced material may be challenged and removed. (July 2008)  
In computing, a system call is the mechanism used by an application program to
request service from the operating system based on the monolithic kernel or to
system servers on operating systems based on the microkernel-structure.

## Contents

  * 1 Background
  * 2 The library as an intermediary
  * 3 Examples and tools
  * 4 Typical implementations
  * 5 References
  * 6 External links

  
## [edit] Background

A system call is a request made by any program to the operating system for
performing tasks -- picked from a predefined set -- which the said program
does not have required permissions to execute in its own flow of execution.
System calls provide the interface between a process and the operating system.
Most operations interacting with the system require permissions not available
to a user level process, e.g. I/O performed with a device present on the
system or any form of communication with other processes requires the use of
system calls.

The fact that improper use of the system call can easily cause a system crash
necessitates some level of control. The design of the microprocessor
architecture on practically all modern systems (except some embedded systems)
offers a series of privilege levels \-- the (low) privilege level in which
normal applications execute limits the address space of the program so that it
cannot access or modify other running applications nor the operating system
itself. It also prevents the application from directly using devices (e.g. the
frame buffer or network devices). But obviously many normal application needs
these abilities; thus it can call the operating system. The operating system
executes at the highest level of privilege and allows the applications to
request services via system calls, which are often implemented through
interrupts. If allowed, the system enters a higher privilege level, executes a
specific set of instructions which the interrupting program has no direct
control over, then returns control to the former flow of execution. This
concept also serves as a way to implement security.

With the development of separate operating modes with varying levels of
privilege, a mechanism was needed for transferring control safely from lesser
privileged modes to higher privileged modes. Less privileged code could not
simply transfer control to more privileged code at any point and with any
processor state. To allow it to do so would allow it to break security. For
instance, the less privileged code could cause the higher privileged code to
execute in the wrong order, or provide it with a bad stack.

## [edit] The library as an intermediary

Generally, systems provide a library that sits between normal programs and the
operating system, usually an implementation of the C library (libc), such as
glibc. This library handles the low-level details of passing information to
the operating system and switching to supervisor mode, as well as any data
processing and preparation which does not need to be done in privileged mode.
Ideally, this reduces the coupling between the OS and the application, and
increases portability.

On exokernel based systems, the library is especially important as an
intermediary. On exokernels, OS shield user applications from the very low
level kernel API, and provide abstractions and resource management.

## [edit] Examples and tools

On Unix, Unix-like and other POSIX systems, popular system calls are `open`,
`read`, `write`, `close`, `wait`, `exec`, `fork`, `exit`, and `kill`. Many of
today's operating systems have hundreds of system calls. For example, Linux
has 319 different system calls. FreeBSD has about the same number (almost
330).

Tools such as strace and truss allow a process to execute from start and
report all system calls the process invokes, or can attach to an already
running process and intercept any system call made by said process if the
operation does not violate the permissions of the user. This special ability
of the program is usually also implemented with a system call, e.g. the GNU's
strace is implemented with i.a. ptrace().

## [edit] Typical implementations

Implementing system calls requires a control transfer which involves some sort
of architecture-specific feature. A typical way to implement this is to use a
software interrupt or trap. Interrupts transfer control to the OS so software
simply needs to set up some register with the system call number they want and
execute the software interrupt.

For many RISC processors this is the only feasible implementation, but CISC
architectures such as x86 support additional techniques. One example is
SYSCALL/SYSRET which is very similar to SYSENTER/SYSEXIT (the two mechanisms
were created by Intel and AMD independently, but do basically the same thing).
These are "fast" control transfer instructions that are designed to quickly
transfer control to the OS for a system call without the overhead of an
interrupt. Linux 2.5 began using this on the x86, where available; formerly it
used the INT instruction, where the system call number was placed in the EAX
register before interrupt 0x80 was executed.[1]

An older x86 mechanism is called a call gate and is a way for a program to
literally call a kernel function directly using a safe control transfer
mechanism the OS sets up in advance. This approach has been unpopular,
presumably due to the requirement of a far call which uses x86 memory
segmentation and the resulting lack of portability it causes, and existence of
the faster instructions mentioned above.

## [edit] References

  1. ^ Anonymous (2002-12-19). "Linux 2.5 gets vsyscalls, sysenter support". KernelTrap. http://kerneltrap.org/node/531. Retrieved on 2008-01-01.

## [edit] External links

  * Interactive map of Linux
  * Linux system calls \- system calls for Linux kernel 2.2, with IA32 calling conventions
  * How System Calls Work on Linux/i86
  * Sysenter Based System Call Mechanism in Linux 2.6
  * Kernel command using Linux system calls \- IBM developerWorks
  * HOWTO for Implementing a System Call on Linux 2.6 \- Amit Choudhary
  * Modular system programming on Minix 3

This article was originally based on material from the Free On-line Dictionary
of Computing, which is licensed under the GFDL.

Retrieved from "http://en.wikipedia.org/wiki/System_call"

Categories: Operating system technology | Application programming interfaces

Hidden categories: Articles needing additional references from July 2008 |
Wikipedia articles incorporating text from FOLDOC

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Äesky
  * Dansk
  * Deutsch
  * ÎÎ»Î»Î·Î½Î¹ÎºÎ¬
  * EspaÃ±ol
  * FranÃ§ais
  * íêµ­ì´
  * Italiano
  * ×¢××¨××ª
  * æ¥æ¬èª
  * Polski
  * PortuguÃªs
  * Ð ÑÑÑÐºÐ¸Ð¹
  * Suomi

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 3 April 2009, at 14:02.
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



