
# Priority inversion

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

In scheduling, priority inversion is the scenario where a low priority task
holds a shared resource that is required by a high priority task. This causes
the execution of the high priority task to be blocked until the low priority
task has released the resource, effectively "inverting" the relative
priorities of the two tasks. If some other medium priority task, one that does
not depend on the shared resource, attempts to run in the interim, it will
take precedence over both the low priority task and the high priority task.

In some cases, priority inversion can occur without causing immediate
harmâthe delayed execution of the high priority task goes unnoticed, and
eventually the low priority task releases the shared resource. However, there
are also many situations in which priority inversion can cause serious
problems. If the high priority task is left starved of the resources, it might
lead to a system malfunction or the triggering of pre-defined corrective
measures, such as a watch dog timer resetting the entire system. The trouble
experienced by the Mars lander "Mars Pathfinder"[1][2] is a classic example of
problems caused by priority inversion in realtime systems.

Priority inversion can also reduce the perceived performance of the system.
Low priority tasks usually have a low priority because it is not important for
them to finish promptly (for example, they might be a batch job or another
non-interactive activity). Similarly, a high priority task has a high priority
because it is more likely to be subject to strict time constraintsâit may be
providing data to an interactive user, or acting subject to realtime response
guarantees. Because priority inversion results in the execution of the low
priority task blocking the high priority task, it can lead to reduced system
responsiveness, or even the violation of response time guarantees.

A similar problem called deadline interchange can occur within Earliest
Deadline First Scheduling (EDF).

## Contents

  * 1 Solutions
  * 2 See also
  * 3 Notes
  * 4 References
  * 5 External links

  
## [edit] Solutions

The existence of this problem has been known since the 1970s, but there is no
fool-proof method to predict the situation. There are however many existing
solutions, of which the most common ones are:

Disabling all interrupts to protect critical sections

    When disabled interrupts are used to prevent priority inversion, there are only two priorities: preemptible, and interrupts disabled. With no third priority, inversion is impossible. Since there's only one piece of lock data (the interrupt-enable bit), misordering locking is impossible, and so deadlocks cannot occur. Since the critical regions always run to completion, hangs do not occur. Note that this only works if all interrupts are disabled. If only a particular hardware device's interrupt is disabled, priority inversion is reintroduced by the hardware's prioritization of interrupts. A simple variation, "single shared-flag locking" is used on some systems with multiple CPUs. This scheme provides a single flag in shared memory that is used by all CPUs to lock all inter-processor critical sections with a busy-wait. Interprocessor communications are expensive and slow on most multiple CPU systems. Therefore, most such systems are designed to minimize shared resources. As a result, this scheme actually works well on many practical systems. These methods are widely used in simple embedded systems, where they are prized for their reliability, simplicity and low resource use. These schemes also require clever programming to keep the critical sections very brief, under 100 microseconds in practical systems. Many software engineers consider them impractical in general-purpose computers.
    Arguably, these methods are similar to priority ceilings.
A priority ceiling

    With priority ceilings, the shared mutex process (that runs the operating system code) has a characteristic (high) priority of its own, which is assigned to the task locking the mutex. This works well, provided the other high priority task(s) that try to access the mutex does not have a priority higher than the ceiling priority.
Priority inheritance

    Under the policy of priority inheritance, whenever a high priority task has to wait for some resource shared with an executing low priority task, the low priority task is assigned the priority of the highest waiting priority task for the duration of its own use of the shared resource, thus keeping medium priority tasks from pre-empting the (originally) low priority task, and thereby effectively the waiting high priority task as well.
## [edit] See also

  * Starvation
  * Pre-emptive multitasking
  * Non-blocking synchronization
  * Read-copy-update
  * Priority inheritance
  * Priority ceiling
  * Nice (Unix)

## [edit] Notes

  1. ^ What Really Happened on Mars by Glenn Reeves of the JPL Pathfinder team
  2. ^ Explanation of priority inversion problem experienced by Mars Pathfinder

## [edit] References

  * "Experience with Processes and Monitors in Mesa" by Butler W. Lampson and David D. Redell, CACM 23(2):105-117 (Feb 1980) - One of the first (if not the) first papers to point out the priority inversion problem. Also suggested disabling interrupts and the priority ceiling protocol as solutions, noting that the former of these two cannot not tolerate page faults while in use.

## [edit] External links

  * Description from FOLDOC
  * Citations from CiteSeer
  * IEEE Priority Inheritance Paper by Sha, Rajkumar, Lehoczky

Retrieved from "http://en.wikipedia.org/wiki/Priority_inversion"

Categories: Concurrency control | Programming bugs | Embedded systems

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°
  * CatalÃ 
  * Deutsch
  * æ¥æ¬èª
  * Polski
  * ä¸­æ

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 21 March 2009, at 13:56.
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



