
# make (software)

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

make Design by Stuart Feldman  
Initial release 1977  
Type build automation tool  
In software development, make is a utility for automatically building
executable programs and libraries from source code. Files called makefiles
specify how to derive the target program from each of its dependencies. Make
typically decides where to start through topological sorting. Though
Integrated Development Environments and language-specific compiler features
can also be used to manage the build process in modern systems, make remains
widely used, especially in Unix-based platforms.

## Contents

  * 1 Origin
  * 2 Modern versions
  * 3 Advantages and disadvantages
  * 4 Makefile structure
  * 5 Example makefile
  * 6 See also
  * 7 References
  * 8 External links

  
## [edit] Origin

There are now a number of dependency-tracking build utilities, but make is one
of the most wide-spread, primarily due to its inclusion in Unix, starting with
the PWB/UNIX 1.0, which featured a variety of tools targeting software
development tasks. It was originally created by Stuart Feldman in 1977 at Bell
Labs. In 2003 Dr. Feldman received the ACM Software System Award for the
invention of this important tool.[1]

Before make's introduction, the Unix build system would most likely consist of
"make" and "install" shell scripts accompanying a program's source. Being able
to combine the commands for the different targets into a single file, and
being able to abstract out dependency tracking and archive handling, was an
important step in the direction of modern build environments.

## [edit] Modern versions

Make has gone through a number of rewrites, and a number of from-scratch
variants which used the same file format and basic algorithmic principles, and
also provided a number of their own non-standard enhancements, in the time
that followed. Some of them are:

  * BSD make, which is derived from Adam de Boor's work on a version of make capable of building targets in parallel, and survives with varying degrees of modification in FreeBSD, NetBSD and OpenBSD. Most notably, it has conditionals and iterative loops which are applied at the parsing stage and may be used to conditionally and programmatically construct the makefile, including generation of targets at runtime.
  * GNU make, which is part of Linux distributions and is frequently used in conjunction with the GNU build system. Its departures from traditional make are most noticeable in pattern-matching in dependency graphs and build targets, as well as a number of functions which may be invoked to have the make utility do things like collect a list of all files in the current directory.
  * Microsoft nmake, commonly available on Windows. It is fairly basic in that it offers only a subset of the features of the two versions of make mentioned above. Microsoft's nmake is not to be confused with nmake from AT&T and Bell Labs for Unix.

POSIX includes standardization of the basic features and operation of the make
utility, and is implemented with varying degrees of completeness in Unix-based
versions of make. In general, simple makefiles may be used between various
versions of make with reasonable success. Some versions of GNU make and BSD
make will look first for files named "GNUmakefile" and "BSDmakefile"
respectively, which allows one to put makefiles which use implementation-
defined behaviour in separate locations.

## [edit] Advantages and disadvantages

In its basic form, Make requires the programmer to manually track all
dependencies between files in the project. This process is error prone, since
a forgotten or an extra dependency might not be immediately obvious, but
instead surfaces as subtle bugs in the software. It is possible to create make
files that generate some of these dependencies, but a more common solution is
to use one of the available generators to make, e.g. the Automake toolchain
provided by the GNU Project.

Another problem not well handled by make is the tailoring of a build process
to a given platform. E.g, the compiler used on one platform might not accept
the same options as the one used on another. This problem is typically handled
by generating platform specific build instructions, which in turn are
processed by make. Common tools for this process are Autoconf and CMake.

The syntax used by Make includes the use of tab, a whitespace character. Many
editors do not provide very clear visual clues to the presence of tabs rather
than spaces, and tab characters are not represented uniformly across editors
in any case, with size varying from as little as 2 spaces to 8 spaces. Thus,
the syntax of make is often subject to criticism. Some projects, such as
Apache Ant, have attempted to redo make with a better syntax, with mixed
success. For programmers using makefile generators, this issue is likely
unimportant.

With the advent of modern Integrated Development Environments, especially on
non-Unix platforms, many programmers do not manually manage dependency
tracking, or even the listing of which files are part of a project. Instead,
the task is automated by the integrated environment. Likewise, many modern
programming languages have language-specific ways of listing dependencies
which are more efficiently tracked through the use of language-specific build
utilities. These approaches typically have the drawback that support for
arbitrary build instructions is limited.

Make is considered to be a mainly declarative programming
language,[2][3][4][5] and these languages are sometimes considered more
difficult for programmers used to imperative programming languages.[6]

## [edit] Makefile structure

A makefile consists of lines of text which define a file (or set of files) or
a rule name as depending on a set of files. Output files are marked as
depending on their source files, for example, and on files which they include
internally, since they all affect the output. After each dependency is listed,
a series of lines of tab-indented text may follow which define how to
transform the input into the output, if the former has been modified more
recently than the latter. In the case where such definitions are present, they
are referred to as "build scripts" and are passed to the shell to generate the
target file. The basic structure is:[7]

    
    # Comments use the hash symbol
    target: dependencies
    	command 1
    	command 2
              .
              .
              .
    	command n
    
A makefile also can contain definitions of variables and inclusion of other
makefiles. Variables in makefiles may be overridden in the command line
arguments passed to the make utility. This allows users to specify different
behaviour for the build scripts and how to invoke programs, among other
things. For example, the variable "CC" is frequently used in makefiles to
refer to a C compiler, and the user may wish to provide an alternate compiler
to use.

## [edit] Example makefile

Below is a very simple makefile that would compile a source called
"helloworld.c" using cc, a C compiler. The PHONY tag is a technicality that
tells make that a particular target name does not produce an actual file. The
`$@` and `$<` are two of the so-called automatic variables and stand for the
target name and so-called "implicit" source, respectively. There are a number
of other automatic variables.[7][8]

    
    helloworld: helloworld.o
    	cc -o $@ $<
     
    helloworld.o: helloworld.c
    	cc -c -o $@ $<
     
    .PHONY: clean
     
    clean:
    	rm -f helloworld helloworld.o
     
    
## [edit] See also

<IMG> Free software portal  
  * Apache Ant
  * CMake
  * configure script
  * Flowtracer
  * GNU Automake
  * imake
  * Jam
  * mk
  * qmake
  * Rake
  * SCons
  * Debian Package Maker

## [edit] References

  1. ^ Matthew Doar (2005). Practical Development Environments. O'Reilly Media. pp. 94\. ISBN 978-0596007966.
  2. ^ [1]
  3. ^ [2]
  4. ^ [3]
  5. ^ [4]
  6. ^ [5]
  7. ^ a b Note that make is sensitive to whitespace; the indented lines in the example below would be preceded by tab characters in functional code.
  8. ^ http://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables

## [edit] External links

  * The Open Group Base Specifications Issue 6 IEEE Std 1003.1, 2004 Edition manual
  * The GNU make manual
  * FreeBSD make manual page
  * OPUS Makefile Tutorial
  * GTK Hello World tutorial including HOWTO create Makefiles
  * Recursive Make Considered Harmful
  * What is wrong with make?
  * Whatâs Wrong With GNU make?
  * Advanced Auto-Dependency Generation.

v â¢ d â¢ e

GNU Project  
History

GNU Manifesto Â· Free Software Foundation Â· History of free software

GNU is not a gnu  
Licences

GNU General Public License Â· GNU Lesser General Public License Â· Affero
General Public License Â· GNU Free Documentation License Â· GPL linking
exception  
Software

GNU (variants) Â· Hurd Â· GNOME Â· Gnuzilla Â· IceCat Â· Gnash Â· Bash Â· GCC
Â· GNU Emacs Â· glibc Â· Coreutils Â· Build system Â· Bazaar Â· LilyPond Â·
Other GNU packages and programs  
Public speakers

Robert J. Chassell Â· LoÃ¯c Dachary Â· Ricardo Galli Â· Joshua Gay Â· Georg C.
F. Greve Â· Federico Heinz Â· Benjamin Mako Hill Â· Bradley M. Kuhn Â· Matt
Lee Â· Eben Moglen Â· Alexandre Oliva Â· Richard Stallman Â· John Sullivan  
Other topics

GNU/Linux naming controversy Â· Revolution OS  
Retrieved from "http://en.wikipedia.org/wiki/Make_(software)"

Categories: GNU project | Compiling tools | Unix software | Build automation

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Dansk
  * Deutsch
  * EspaÃ±ol
  * Esperanto
  * ÙØ§Ø±Ø³Û
  * FranÃ§ais
  * íêµ­ì´
  * Italiano
  * Nederlands
  * æ¥æ¬èª
  * Polski
  * PortuguÃªs
  * Ð ÑÑÑÐºÐ¸Ð¹
  * Suomi
  * Svenska
  * TÃ¼rkÃ§e
  * Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°
  * ä¸­æ

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 18 March 2009, at 12:09.
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



