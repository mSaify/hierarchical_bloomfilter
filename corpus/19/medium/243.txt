
# Design pattern (computer science)

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

In software engineering, a design pattern is a general reusable solution to a
commonly occurring problem in software design. A design pattern is not a
finished design that can be transformed directly into code. It is a
description or template for how to solve a problem that can be used in many
different situations. Object-oriented design patterns typically show
relationships and interactions between classes or objects, without specifying
the final application classes or objects that are involved. Algorithms are not
thought of as design patterns, since they solve computational problems rather
than design problems.

Not all software patterns are design patterns. Design patterns deal
specifically with problems at the level of software design. Other kinds of
patterns, such as architectural patterns, describe problems and solutions that
have alternative scopes.

## Contents

  * 1 History
  * 2 Practice
  * 3 Structure
    * 3.1 Domain specific patterns
  * 4 Classification
  * 5 Documentation
  * 6 Criticism
    * 6.1 Workarounds for missing language features
    * 6.2 Does not differ significantly from other abstractions
  * 7 See also
  * 8 References
  * 9 Further reading
  * 10 External links

  
## [edit] History

Patterns originated as an architectural concept by Christopher Alexander
(1977/79). In 1987, Kent Beck and Ward Cunningham began experimenting with the
idea of applying patterns to programming and presented their results at the
OOPSLA conference that year.[1][2] In the following years, Beck, Cunningham
and others followed up on this work.

Design patterns gained popularity in computer science after the book Design
Patterns: Elements of Reusable Object-Oriented Software was published in 1994
(Gamma et al.). That same year, the first Pattern Languages of Programming
Conference was held and the following year, the Portland Pattern Repository
was set up for documentation of design patterns. The scope of the term remains
a matter of dispute. Notable books in the design pattern genre include:

  * Fowler, Martin (2002). Patterns of Enterprise Application Architecture. Addison-Wesley. ISBN 978-0321127426.
  * Gamma, Erich; Richard Helm, Ralph Johnson, and John Vlissides (1995). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley. ISBN 0-201-63361-2.
  * Hohpe, Gregor; Bobby Woolf (2003). Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions. Addison-Wesley. ISBN 0-321-20068-3.

Although the practical application of design patterns is a phenomenon,
formalization of the concept of a design pattern languished for several
years.[3]

## [edit] Practice

Design patterns can speed up the development process by providing tested,
proven development paradigms. Effective software design requires considering
issues that may not become visible until later in the implementation. Reusing
design patterns helps to prevent subtle issues that can cause major problems,
and it also improves code readability for coders and architects who are
familiar with the patterns.

In order to achieve flexibility, design patterns usually introduce additional
levels of indirection, which in some cases may complicate the resulting
designs and hurt application performance.

By definition, a pattern must be programmed anew into each application that
uses it. Since some authors see this as a step backward from software reuse as
provided by components, researchers have worked to turn patterns into
components. Meyer and Arnout claim a two-thirds success rate in componentizing
the best-known patterns.[4]

Often, people only understand how to apply certain software design techniques
to certain problems. These techniques are difficult to apply to a broader
range of problems. Design patterns provide general solutions, documented in a
format that doesn't require specifics tied to a particular problem.

## [edit] Structure

Design patterns are composed of several sections (see Documentation below). Of
particular interest are the Structure, Participants, and Collaboration
sections. These sections describe a design motif: a prototypical micro-
architecture that developers copy and adapt to their particular designs to
solve the recurrent problem described by the design pattern. A micro-
architecture is a set of program constituents (e.g., classes, methods...) and
their relationships. Developers use the design pattern by introducing in their
designs this prototypical micro-architecture, which means that micro-
architectures in their designs will have structure and organization similar to
the chosen design motif..

In addition, patterns allow developers to communicate using well-known, well
understood names for software interactions. Common design patterns can be
improved over time, making them more robust than ad-hoc designs.

### [edit] Domain specific patterns

Efforts have also been made to codify design patterns in particular domains,
including use of existing design patterns as well as domain specific design
patterns. Examples include User Interface design patterns,[5] Information
Visualization [6], Secure Usability[7] and web design.[8]

The Pattern Languages of Programming Conference (annual, 1994â) proceedings
includes many examples of domain specific patterns.

## [edit] Classification

Design patterns were originally grouped into the categories Creational
patterns, Structural patterns, and Behavioral patterns, and described them
using the concepts of delegation, aggregation, and consultation. For further
background on object-oriented design, see coupling and cohesion. For further
background on object-oriented programming, see inheritance, interface, and
polymorphism. Another classification has also introduced the notion of
architectural design pattern which may be applied at the architecture level of
the software such as the Model-View-Controller pattern.

Name Description In Design Patterns (book) In Code Complete[9]  
Creational patterns  
Abstract factory Provide an interface for creating families of related or
dependent objects without specifying their concrete classes. Yes Yes  
Factory method Define an interface for creating an object, but let subclasses
decide which class to instantiate. Factory Method lets a class defer
instantiation to subclasses. Yes Yes  
Builder Separate the construction of a complex object from its representation
so that the same construction process can create different representations.
Yes No  
Lazy initialization Tactic of delaying the creation of an object, the
calculation of a value, or some other expensive process until the first time
it is needed. No No  
Object pool Avoid expensive acquisition and release of resources by recycling
objects that are no longer in use No No  
Prototype Specify the kinds of objects to create using a prototypical
instance, and create new objects by copying this prototype. Yes No  
Singleton Ensure a class has only one instance, and provide a global point of
access to it. Yes Yes  
Multiton Ensure a class has only named instances, and provide global point of
access to them. No No  
Resource acquisition is initialization Ensure that resources are properly
released by tying them to the lifespan of suitable objects. No No  
Structural patterns  
Adapter Convert the interface of a class into another interface clients
expect. Adapter lets classes work together that couldn't otherwise because of
incompatible interfaces. Yes Yes  
Bridge Decouple an abstraction from its implementation so that the two can
vary independently. Yes Yes  
Composite Compose objects into tree structures to represent part-whole
hierarchies. Composite lets clients treat individual objects and compositions
of objects uniformly. Yes Yes  
Decorator Attach additional responsibilities to an object dynamically keeping
the same interface. Decorators provide a flexible alternative to subclassing
for extending functionality. Yes Yes  
Facade Provide a unified interface to a set of interfaces in a subsystem.
Facade defines a higher-level interface that makes the subsystem easier to
use. Yes Yes  
Flyweight Use sharing to support large numbers of fine-grained objects
efficiently. Yes No  
Proxy Provide a surrogate or placeholder for another object to control access
to it. Yes No  
Behavioral patterns  
Chain of responsibility Avoid coupling the sender of a request to its receiver
by giving more than one object a chance to handle the request. Chain the
receiving objects and pass the request along the chain until an object handles
it. Yes No  
Command Encapsulate a request as an object, thereby letting you parameterize
clients with different requests, queue or log requests, and support undoable
operations. Yes No  
Interpreter Given a language, define a representation for its grammar along
with an interpreter that uses the representation to interpret sentences in the
language. Yes No  
Iterator Provide a way to access the elements of an aggregate object
sequentially without exposing its underlying representation. Yes Yes  
Mediator Define an object that encapsulates how a set of objects interact.
Mediator promotes loose coupling by keeping objects from referring to each
other explicitly, and it lets you vary their interaction independently. Yes No  
Memento Without violating encapsulation, capture and externalize an object's
internal state so that the object can be restored to this state later. Yes No  
Null Object designed to act as a default value of an object. No No  
Observer Define a one-to-many dependency between objects so that when one
object changes state, all its dependents are notified and updated
automatically. Yes Yes  
State Allow an object to alter its behavior when its internal state changes.
The object will appear to change its class. Yes No  
Strategy Define a family of algorithms, encapsulate each one, and make them
interchangeable. Strategy lets the algorithm vary independently from clients
that use it. Yes Yes  
Specification Recombinable business logic in a boolean fashion No No  
Template method Define the skeleton of an algorithm in an operation, deferring
some steps to subclasses. Template Method lets subclasses redefine certain
steps of an algorithm without changing the algorithm's structure. Yes Yes  
Visitor Represent an operation to be performed on the elements of an object
structure. Visitor lets you define a new operation without changing the
classes of the elements on which it operates. Yes No  
Concurrency patterns  
Active Object The Active Object design pattern decouples method execution from
method invocation that reside in their own thread of control. The goal is to
introduce concurrency, by using asynchronous method invocation and a scheduler
for handling requests. No No  
Event-Based Asynchronous The event-based asynchronous design pattern addresses
problems with the Asychronous Pattern that occur in multithreaded
programs.[10] No No  
Balking The Balking pattern is a software design pattern that only executes an
action on an object when the object is in a particular state. No No  
Double checked locking Double-checked locking is a software design pattern
also known as "double-checked locking optimization". The pattern is designed
to reduce the overhead of acquiring a lock by first testing the locking
criterion (the 'lock hint') in an unsafe manner; only if that succeeds does
the actual lock proceed.

The pattern, when implemented in some language/hardware combinations, can be
unsafe. It can therefore sometimes be considered to be an anti-pattern.

No No  
Guarded In concurrent programming, guarded suspension is a software design
pattern for managing operations that require both a lock to be acquired and a
precondition to be satisfied before the operation can be executed. No No  
Monitor object A monitor is an approach to synchronize two or more computer
tasks that use a shared resource, usually a hardware device or a set of
variables. No No  
Read write lock A read/write lock pattern or simply RWL is a software design
pattern that allows concurrent read access to an object but requires exclusive
access for write operations. No No  
Scheduler The scheduler pattern is a software design pattern. It is a
concurrency pattern used to explicitly control when threads may execute
single-threaded code. No No  
Thread pool In the thread pool pattern in programming, a number of threads are
created to perform a number of tasks, which are usually organized in a queue.
Typically, there are many more tasks than threads. No No  
Thread-specific storage Thread-local storage (TLS) is a computer programming
method that uses static or global memory local to a thread. No No  
Reactor The reactor design pattern is a concurrent programming pattern for
handling service requests delivered concurrently to a service handler by one
or more inputs. The service handler then demultiplexes the incoming requests
and dispatches them synchronously to the associated request handlers. No No  
## [edit] Documentation

The documentation for a design pattern describes the context in which the
pattern is used, the forces within the context that the pattern seeks to
resolve, and the suggested solution.[11] There is no single, standard format
for documenting design patterns. Rather, a variety of different formats have
been used by different pattern authors. However, according to Martin Fowler
certain pattern forms have become more well-known than others, and
consequently become common starting points for new pattern writing
efforts.[12] One example of a commonly used documentation format is the one
used by Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides
(collectively known as the "Gang of Four", or GoF for short) in their book
Design Patterns. It contains the following sections:

  * Pattern Name and Classification: A descriptive and unique name that helps in identifying and referring to the pattern.
  * Intent: A description of the goal behind the pattern and the reason for using it.
  * Also Known As: Other names for the pattern.
  * Motivation (Forces): A scenario consisting of a problem and a context in which this pattern can be used.
  * Applicability: Situations in which this pattern is usable; the context for the pattern.
  * Structure: A graphical representation of the pattern. Class diagrams and Interaction diagrams may be used for this purpose.
  * Participants: A listing of the classes and objects used in the pattern and their roles in the design.
  * Collaboration: A description of how classes and objects used in the pattern interact with each other.
  * Consequences: A description of the results, side effects, and trade offs caused by using the pattern.
  * Implementation: A description of an implementation of the pattern; the solution part of the pattern.
  * Sample Code: An illustration of how the pattern can be used in a programming language
  * Known Uses: Examples of real usages of the pattern.
  * Related Patterns: Other patterns that have some relationship with the pattern; discussion of the differences between the pattern and similar patterns.

## [edit] Criticism

<IMG>

This article's Criticism or Controversy section(s) may mean the article does
not present a neutral point of view of the subject. It may be better to
integrate the material in such sections into the article as a whole.  
In the field of computer science, there exist some criticisms regarding the
concept of design patterns.

### [edit] Workarounds for missing language features

Users of dynamic programming languages have discussed many design patterns as
workarounds for the limitations of languages such as C++ and Java. For
instance, the Visitor pattern need not be implemented in a language that
supports multimethods. The purpose of Visitor is to add new operations to
existing classes without modifying those classes. In C++, a class is declared
as a syntactic structure with a specific and closed set of methods. In a
language with multimethods, such as Common Lisp, methods for a class are
outside of the class structure, and one may add new methods without modifying
it. Similarly, the Decorator pattern amounts to implementing dynamic
delegation, as found in Common Lisp, Objective C, Self and JavaScript.

Peter Norvig, in Design Patterns in Dynamic Programming, discusses the
triviality of implementing various patterns in dynamic languages. [13] Norvig
and others have described language features that encapsulate or replace
various patterns that a C++ user must implement for themselves.

### [edit] Does not differ significantly from other abstractions

Some authors[who?] allege that design patterns don't differ significantly from
other forms of abstraction[citation needed], and that the use of new
terminology (borrowed from the architecture community) to describe existing
phenomena in the field of programming is unnecessary. The Model-View-
Controller paradigm is cited as an example of a "pattern" which predates the
concept of "design patterns" by several years.[14] It is further argued by
some[who?] that the primary contribution of the Design Patterns community (and
the Gang of Four book) was the use of Alexander's pattern language as a form
of documentation; a practice which is often ignored in the
literature.[citation needed]

## [edit] See also

  * Anti-pattern
  * Architectural pattern
  * Business pattern
  * Christopher Alexander
  * Distributed design patterns
  * GRASP (Object Oriented Design)
  * Interaction design pattern
  * List of software development philosophies
  * List of software engineering topics
  * Pattern language
  * Pattern theory
  * Pedagogical patterns
  * Portland Pattern Repository
  * Refactoring

## [edit] References

  1. ^ Smith, Reid (October 1987). "Panel on design methodology" in OOPSLA '87. OOPSLA '87 Addendum to the Proceedings. doi:10.1145/62138.62151. , "Ward cautioned against requiring too much programming at, what he termed, 'the high level of wizards.' He pointed out that a written 'pattern language' can significantly improve the selection and application of abstractions. He proposed a 'radical shift in the burden of design and implementation' basing the new methodology on an adaptation of Christopher Alexander's work in pattern languages and that programming-oriented pattern languages developed at Tektronix has significantly aided their software development efforts."
  2. ^ Beck, Kent; Ward Cunningham (September 1987). "Using Pattern Languages for Object-Oriented Program" in OOPSLA '87. OOPSLA '87 workshop on Specification and Design for Object-Oriented Programming'. Retrieved on 2006-05-26.
  3. ^ Baroni, Aline LÃºcia; Yann-GaÃ«l GuÃ©hÃ©neuc and HervÃ© Albin-Amiot (June 2003). "Design Patterns Formalization". written at Nantes (PDF). Ãcole Nationale SupÃ©rieure des Techniques Industrielles et des Mines de Nantes. http://www.iro.umontreal.ca/~ptidej/Publications/Documents/Research+report+Metamodeling+June03.doc.pdf. Retrieved on 2007-12-29.
  4. ^ Meyer, Bertrand; Karine Arnout (July 2006). "Componentization: The Visitor Example". IEEE Computer (IEEE) 39 (7): 23â30. http://se.ethz.ch/~meyer/publications/computer/visitor.pdf.
  5. ^ Laakso, Sari A. (2003-09-16). "Collection of User Interface Design Patterns". University of Helsinki, Dept. of Computer Science. http://www.cs.helsinki.fi/u/salaakso/patterns/index.html. Retrieved on 2008-01-31.
  6. ^ Heer, J.; M. Agrawala (2006). "Software Design Patterns for Information Visualization". IEEE Transactions on Visualization and Computer Graphics 12 (5): 853. doi:10.1109/TVCG.2006.178. http://vis.berkeley.edu/papers/infovis_design_patterns/.
  7. ^ Simson L. Garfinkel (2005). Design Principles and Patterns for Computer Systems That Are Simultaneously Secure and Usable. http://www.simson.net/thesis/.
  8. ^ "Yahoo! Design Pattern Library". http://developer.yahoo.com/ypatterns/. Retrieved on 2008-01-31.
  9. ^ McConnell, Steve (June 2004). "Design in Construction". Code Complete (2nd ed.). Microsoft Press. pp. 104\. ISBN 978-0735619678. "Table 5.1 Popular Design Patterns"
  10. ^ Christian Nagel, Bill Evjen, Jay Glynn, Karli Watson, and Morgan Skinner (2008). "Event-based Asynchronous Pattern". Professional C# 2008. Wiley. pp. 570â571. ISBN 0470191376.
  11. ^ Gabriel, Dick. "A Pattern Definition". http://hillside.net/patterns/definition.html. Retrieved on 2007-03-06.
  12. ^ Fowler, Martin (2006-08-01). "Writing Software Patterns". http://www.martinfowler.com/articles/writingPatterns.html. Retrieved on 2007-03-06.
  13. ^ Norvig, Peter (1998-03-17). "Design Patterns in Dynamic Programming". http://norvig.com/design-patterns. Retrieved on 2007-12-29.
  14. ^ Reenskaug, Trygve. "MVC XEROX PARC 1978-79". http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html. Retrieved on 2008-06-09.

<IMG>

This article needs additional citations for verification. Please help improve
this article by adding reliable references (ideally, using inline citations).
Unsourced material may be challenged and removed. (November 2008)  
## [edit] Further reading

Books

  * Alexander, Christopher; Sara Ishikawa, Murray Silverstein, Max Jacobson, Ingrid Fiksdahl-King, Shlomo Angel (1977). A Pattern Language: Towns, Buildings, Construction. New York: Oxford University Press. ISBN 978-0195019193.
  * Beck, Kent (October 2007). Implementation Patterns. Addison-Wesley. ISBN 978-0321413093.
  * Beck, Kent; R. Crocker, G. Meszaros, J.O. Coplien, L. Dominick, F. Paulisch, and J. Vlissides (March 1996). Proceedings of the 18th International Conference on Software Engineering. pp. 25â30.
  * Borchers, Jan (2001). A Pattern Approach to Interaction Design. John Wiley & Sons. ISBN 0-471-49828-9.
  * Coplien, James O.; Douglas C. Schmidt (1995). Pattern Languages of Program Design. Addison-Wesley. ISBN 0-201-60734-4.
  * Coplien, James O.; John M. Vlissides, and Norman L. Kerth (1996). Pattern Languages of Program Design 2. Addison-Wesley. ISBN 0-201-89527-7.
  * Fowler, Martin (2002). Patterns of Enterprise Application Architecture. Addison-Wesley. ISBN 978-0321127426.
  * Freeman, Eric; Elisabeth Freeman, Kathy Sierra, and Bert Bates (2004). Head First Design Patterns. O'Reilly Media. ISBN 0-596-00712-4.
  * Gabriel, Richard (1996) (PDF). Patterns of Software: Tales From The Software Community. Oxford University Press. pp. 235\. ISBN 0-19-512123-6. http://www.dreamsongs.com/NewFiles/PatternsOfSoftware.pdf.
  * Gamma, Erich; Richard Helm, Ralph Johnson, and John Vlissides (1995). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley. ISBN 0-201-63361-2.
  * Hohpe, Gregor; Bobby Woolf (2003). Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions. Addison-Wesley. ISBN 0-321-20068-3.
  * Holub, Allen (2004). Holub on Patterns. Apress. ISBN 1-59059-388-X.
  * Kerievsky, Joshua (2004). Refactoring to Patterns. Addison-Wesley. ISBN 0-321-21335-1.
  * Kircher, Michael; Markus VÃ¶lter and Uwe Zdun (2005). Remoting Patterns: Foundations of Enterprise, Internet and Realtime Distributed Object Middleware. John Wiley & Sons. ISBN 0-470-85662-9.
  * Larman, Craig (2005). Applying UML and Patterns. Prentice Hall. ISBN 0-13-148906-2.
  * Manolescu, Dragos; Markus Voelter and James Noble (2006). Pattern Languages of Program Design 5. Addison-Wesley. ISBN 0-321-32194-4.
  * Marinescu, Floyd (2002). EJB Design Patterns: Advanced Patterns, Processes and Idioms. John Wiley & Sons. ISBN 0-471-20831-0.
  * Martin, Robert Cecil; Dirk Riehle and Frank Buschmann (1997). Pattern Languages of Program Design 3. Addison-Wesley. ISBN 0-201-31011-2.
  * Mattson, Timothy G; Beverly A. Sanders and Berna L. Massingill (2005). Patterns for Parallel Programming. Addison-Wesley. ISBN 0-321-22811-1.
  * Shalloway, Alan; James R. Trott (2001). Design Patterns Explained, Second Edition: A New Perspective on Object-Oriented Design. Addison-Wesley. ISBN 0-321-24714-0.
  * Vlissides, John M. (1998). Pattern Hatching: Design Patterns Applied. Addison-Wesley. ISBN 0-201-43293-5.
  * Weir, Charles; James Noble (2000). Small Memory Software: Patterns for systems with limited memory. Addison-Wesley. ISBN 0201596075. http://www.cix.co.uk/~smallmemory/.

Web sites

  * "History of Patterns". Portland Pattern Repository. http://www.c2.com/cgi-bin/wiki?HistoryOfPatterns. Retrieved on 2005-07-28.
  * "Are Design Patterns Missing Language Features?". Cunningham & Cunningham, Inc.. http://www.c2.com/cgi/wiki?AreDesignPatternsMissingLanguageFeatures. Retrieved on 2006-01-20.
  * "Show Trial of the Gang of Four". Cunningham & Cunningham, Inc.. http://www.c2.com/cgi/wiki?ShowTrialOfTheGangOfFour. Retrieved on 2006-01-20.

## [edit] External links

  * Directory of websites that provide pattern catalogs at hillside.net.
  * Ward Cunningham's Portland Pattern Repository.
  * Patterns and Anti-Patterns at the Open Directory Project
  * PerfectJPattern Open Source Project Design Patterns library that aims to provide full or partial componentized version of all known Patterns in Java.
  * Jt J2EE Pattern Oriented Framework
  * Printable Design Patterns Quick Reference Cards
  * 101 Design Patterns & Tips for Developers
  * On Patterns and Pattern Languages by Buschmann, Henney, and Schmidt
  * Patterns for Scripted Applications
  * Design Patterns Reference at oodesign.com

v â¢ d â¢ e

Design patterns in the book Design Patterns  
Creational

Abstract factory Â· Builder Â· Factory Â· Prototype Â· Singleton  
Structural

Adapter Â· Bridge Â· Composite Â· Decorator Â· Facade Â· Flyweight Â· Proxy  
Behavioral

Chain of responsibility Â· Command Â· Interpreter Â· Iterator Â· Mediator Â·
Memento Â· Observer Â· State Â· Strategy Â· Template method Â· Visitor  
Retrieved from
"http://en.wikipedia.org/wiki/Design_pattern_(computer_science)"

Categories: Software design patterns

Hidden categories: Cleanup from section | All pages needing cleanup | Articles
with specifically-marked weasel-worded phrases since March 2009 | All articles
with unsourced statements | Articles with unsourced statements since March
2007 | Articles with unsourced statements since February 2007 | Articles
needing additional references from November 2008

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Afrikaans
  * Alemannisch
  * Ø§ÙØ¹Ø±Ø¨ÙØ©
  * Asturianu
  * Bosanski
  * ÐÑÐ»Ð³Ð°ÑÑÐºÐ¸
  * CatalÃ 
  * Äesky
  * Dansk
  * Deutsch
  * ÎÎ»Î»Î·Î½Î¹ÎºÎ¬
  * EspaÃ±ol
  * ÙØ§Ø±Ø³Û
  * FranÃ§ais
  * íêµ­ì´
  * Bahasa Indonesia
  * Italiano
  * ×¢××¨××ª
  * LietuviÅ³
  * Nederlands
  * æ¥æ¬èª
  * âªNorsk (bokmÃ¥l)â¬
  * Polski
  * PortuguÃªs
  * Ð ÑÑÑÐºÐ¸Ð¹
  * Simple English
  * Srpskohrvatski / Ð¡ÑÐ¿ÑÐºÐ¾Ñ ÑÐ²Ð°ÑÑÐºÐ¸
  * Suomi
  * Svenska
  * à®¤à®®à®¿à®´à¯
  * à¹à¸à¸¢
  * Tiáº¿ng Viá»t
  * TÃ¼rkÃ§e
  * Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°
  * ä¸­æ
  * Ð ÑÑÑÐºÐ¸Ð¹

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 2 April 2009, at 19:40.
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



