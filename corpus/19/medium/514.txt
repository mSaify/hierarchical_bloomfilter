
# Scrum (development)

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

For other uses, see Scrum.

<IMG>

<IMG>

The Scrum process.

Software development process  
Activities and steps  
Requirements Â· Specification  
Architecture Â· Design  
Implementation Â· Testing  
Deployment Â· Maintenance  
Models  
Agile Â· Cleanroom Â· DSDM  
Iterative Â· RAD Â· RUP Â· Spiral  
Waterfall Â· XP Â· Scrum Â· V-Model  
FDD  
Supporting disciplines  
Configuration management  
Documentation  
Quality assurance (SQA)  
Project management  
User experience design  
Tools  
Compiler Â· Debugger Â· Profiler  
GUI designer  
Integrated development environment  
This box: view â¢ talk  
Scrum is an iterative incremental process of software development commonly
used with agile software development. Despite the fact that "Scrum" is not an
acronym, some companies implementing the process have been known to adhere to
an all capital letter expression of the word, i.e. SCRUM. This may be due to
one of Ken Schwaber's early papers capitalizing SCRUM in the title.[1]

Although Scrum was intended for management of software development projects,
it can be used to run software maintenance teams, or as a general
project/program management approach.

## Contents

  * 1 History
  * 2 Characteristics
  * 3 Roles
    * 3.1 "Pig" roles
    * 3.2 "Chicken" roles
  * 4 Meetings
  * 5 Artifacts
    * 5.1 Product backlog
    * 5.2 Sprint backlog
    * 5.3 Burn down
  * 6 Adaptive project management
  * 7 Terminology
    * 7.1 Roles
    * 7.2 Artifacts
    * 7.3 Others
  * 8 Extended usage
    * 8.1 Product development
    * 8.2 Marketing project management methodology
  * 9 Videos
  * 10 See also
  * 11 References
  * 12 External links

  
## [edit] History

In 1986, Hirotaka Takeuchi and Ikujiro Nonaka described a new holistic
approach that increases speed and flexibility in commercial new product
development.[2] They compare this new holistic approach, in which the phases
strongly overlap and the whole process is performed by one cross-functional
team across the different phases, to rugby, where the whole team "tries to go
to the distance as a unit, passing the ball back and forth". The case studies
come from the automotive, photo machine, computer and printer industries.

In 1991, DeGrace and Stahl, in Wicked Problems, Righteous Solutions,[3]
referred to this approach as Scrum, a rugby term mentioned in the article by
Takeuchi and Nonaka. In the early 1990s, Ken Schwaber used an approach that
led to Scrum at his company, Advanced Development Methods. At the same time,
Jeff Sutherland, John Scumniotales, and Jeff McKenna developed a similar
approach at Easel Corporation and was the first to call it Scrum.[4] In 1995
Sutherland and Schwaber jointly presented a paper describing Scrum at OOPSLA
'95 in Austin, its first public appearance. Schwaber and Sutherland
collaborated during the following years to merge the above writings, their
experiences, and industry best practices into what is now known as Scrum. In
2001, Schwaber teamed up with Mike Beedle to write up the method in the book
Agile Software Development with Scrum.

## [edit] Characteristics

Scrum is a "process skeleton," which contains sets of practices and predefined
roles. The main roles in Scrum are: (1) the "ScrumMaster," who maintains the
processes and works similarly to a project manager; (2) the "Product Owner,"
who represents the stakeholders; and (3) the "Team", which consists of
developers.

During each "sprint", typically a twoâfour week period (with the length
being decided by the team), the team creates an increment of usable software.
The set of features that go into a sprint come from the product "backlog",
which is a prioritized set of high level requirements of work to be done.
Which backlog items go into the sprint is determined during the sprint
planning meeting. During this meeting, the Product Owner informs the team of
the items in the product backlog that he wants completed. The team then
determines how much of this they can commit to complete during the next
sprint.[1] During a sprint, no one is allowed to change the sprint backlog,
which means that the requirements are frozen for that sprint. After a sprint
is completed, the team demonstrates the use of the software.

Scrum enables the creation of self-organizing teams by encouraging co-location
of all team members, and verbal communication across all team members and
disciplines that are involved in the project.

A key principle of Scrum is its recognition that during a project the
customers can change their minds about what they want and need (often called
requirements churn), and that unpredicted challenges cannot be easily
addressed in a traditional predictive or planned manner. As such, Scrum adopts
an empirical approachâaccepting that the problem cannot be fully understood
or defined, focusing instead on maximizing the team's ability to deliver
quickly and respond to emerging requirements.

There are several implementations of systems for managing the Scrum process,
which range from yellow stickers and whiteboards, to software packages. One of
Scrum's biggest advantages is that it is very easy to learn and requires
little effort to start using.

## [edit] Roles

Main article: The Chicken and the Pig

Several roles are defined in Scrum; these are divided into two groups; pigs
and chickens, based on a joke about a pig and a chicken.[5]

> A pig and a chicken are walking down a road. The chicken looks at the pig
and says, "Hey, why don't we open a restaurant?" The pig looks back at the
chicken and says, "Good idea, what do you want to call it?" The chicken thinks
about it and says, "Why don't we call it 'Ham and Eggs'?" "I don't think so,"
says the pig, "I'd be committed, but you'd only be involved."

So the "pigs" are committed to building software regularly and frequently,
while everyone else is a "chicken" - interested in the project but really
indifferent because if it fails they're not the pigs - that is, they weren't
the ones that committed to doing it. The needs, desires, ideas and influences
of the chicken roles are taken into account, but are not in any way allowed to
affect, distort or get in the way of the actual Scrum project.

### [edit] "Pig" roles

The Pigs are the ones committed to the project in the Scrum process - they are
the ones with "their bacon on the line."

Product Owner

    The Product Owner represents the voice of the customer. He/she ensures that the Scrum Team works with the "right things" from a business perspective. The Product Owner writes user stories, prioritizes them then places them in the product backlog.
ScrumMaster (or Facilitator)

    Scrum is facilitated by a ScrumMaster, whose primary job is to remove impediments to the ability of the team to deliver the sprint goal. The ScrumMaster is not the leader of the team (as the team is self-organizing) but acts as a buffer between the team and any distracting influences. The ScrumMaster ensures that the Scrum process is used as intended. The ScrumMaster is the enforcer of rules. A key part of the Scrum Masters role is to protect the team and keep them focused on the tasks in hand.
Team

    The team has the responsibility to deliver the product. A team is typically made up of 5â9 people with cross-functional skills who do the actual work (designer, developer, tester, technical communicator, etc.).
### [edit] "Chicken" roles

Chicken roles are not part of the actual Scrum process, but must be taken into
account. An important aspect of an Agile approach is the practice of involving
users, internal business groups and stakeholders into portions of the process.
It is important for these people to be engaged in the outcome of the project
by providing feedback into the development, its review and planning for each
sprint.

Users

    The software is being built for someone. "If software is not used"âmuch like "the tree falling in a forest" riddleâ"was it ever written?"[citation needed]
Stakeholders (customers, vendors)

    These are the people who enable the project and for whom the project will produce the agreed-upon benefit[s], which justify its production. They are only directly involved in the process during the sprint reviews.
Managers

    People who will set up the environment for the product development organizations.
## [edit] Meetings

Daily Scrum

    Each day during the sprint, a project status meeting occurs. This is called a "scrum", or "the daily standup". The scrum has specific guidelines: 
  * The meeting starts precisely on time. Often there are team-decided punishments for tardiness (e.g. money, push-ups, hanging a rubber chicken around your neck)
  * All are welcome, but only "pigs" may speak
  * The meeting is timeboxed at 15-20 minutes depending on the team's size
  * All attendees should stand (it helps to keep meeting short)
  * The meeting should happen at the same location and same time every day

    During the meeting, each team member answers three questions:[6]
  * What have you done since yesterday?
  * What are you planning to do by today?
  * Do you have any problems preventing you from accomplishing your goal? (It is the role of the ScrumMaster to remember these impediments.)

Sprint Planning Meeting[7] [8]

    At the beginning of the sprint cycle (every 15â30 days), a "Sprint Planning Meeting" is held. 
  * Select what work is to be done
  * Prepare the Sprint Backlog that details the time it will take to do that work, with the entire team
  * Identify and communicate how much of the work is likely to be done during the current sprint
  * Eight hour limit

Sprint Review Meeting[9]

    At the end of a sprint cycle, two meetings are held: the "Sprint Review Meeting" and the "Sprint Retrospective" 
  * Review the work that was completed and not completed
  * Present the completed work to the stakeholders (a.k.a. "the demo")
  * Incomplete work cannot be demonstrated
  * Four hour time limit

Sprint Retrospective[10]

    
  * All team members reflect on the past sprint.
  * Make continuous process improvement.
  * Two main questions are asked in the sprint retrospective: What went well during the sprint? What could be improved in the next sprint?
  * Three hour time limit

## [edit] Artifacts

### [edit] Product backlog

The product backlog is a high-level document for the entire project. It
contains backlog items: broad descriptions of all required features, wish-list
items, etc. prioritised by business value. It is the "What" that will be
built. It is open and editable by anyone and contains rough estimates of both
business value and development effort. Those estimates help the Product Owner
to gauge the timeline and, to a limited extent, priority. For example, if the
"add spellcheck" and "add table support" features have the same business
value, the one with the smallest development effort will probably have higher
priority, because the ROI is higher.

The product backlog is property of the Product Owner. Business value is set by
the Product Owner. Development effort is set by the Team.

### [edit] Sprint backlog

The sprint backlog is a greatly detailed document containing information about
how the team is going to implement the features for the upcoming sprint.
Features are broken down into tasks; as a best practice tasks are normally
estimated between four and 16 hours of work. With this level of detail the
whole team understands exactly what to do, and anyone can potentially pick a
task from the list. Tasks on the sprint backlog are never assigned; rather,
tasks are signed up for by the team members as needed, according to the set
priority and the team member skills.

The sprint backlog is property of the Team. Estimations are set by the Team.
Often an according Task Board is used to see and change the state of the tasks
of the current sprint, like "to do", "in progress" and "done".

### [edit] Burn down

The burn down chart is a publicly displayed chart showing remaining work in
the sprint backlog. Updated every day, it gives a simple view of the sprint
progress. It also provides quick visualizations for reference.

It should not be confused with an earned value chart.

## [edit] Adaptive project management

The following are some general practices of Scrum:

  * Customers become a part of the development team (i.e. the customer must be genuinely interested in the output.)
  * Scrum has frequent intermediate deliveries with working functionality, like all other forms of agile software processes. This enables the customer to get working software earlier and enables the project to change its requirements according to changing needs.
  * Frequent risk and mitigation plans are developed by the development team itselfârisk mitigation, monitoring and management (risk analysis) occurs at every stage and with commitment.
  * Transparency in planning and module developmentâlet everyone know who is accountable for what and by when.
  * Frequent stakeholder meetings to monitor progressâbalanced dashboard updates (delivery, customer, employee, process, stakeholders)
  * There should be an advance warning mechanism, i.e. visibility to potential slippage or deviation ahead of time.
  * No problems are swept under the carpet. No one is penalized for recognizing or describing any unforeseen problem.
  * Workplaces and working hours must be energizedâ"Working more hours" does not necessarily mean "producing more output."

  
CAUTION: Nothing in this article has addressed the testing methodology of this
development style, especially since this method is "adaptive" and done in
sprints. Test cases designed during the beginning of the project may need to
be totally redesigned and then must be run again each time something is new is
created or added to the existing code --- creating the very possible cost-
overrun potenial as well as added time-delay in product completion. (Testing
must also be completed when any "fix" or "patch" is created.) Note: This
development process will also require regression test development and testing
(in addition to use-case scenario / requirements testing) to ensure that the
new/additional code added to the product does not affect the integrity of
previously tested code in its entirety.

## [edit] Terminology

The following terminology is used in Scrum:[11]

### [edit] Roles

Product Owner

    The person responsible for maintaining the Product Backlog by representing the interests of the stakeholders.
ScrumMaster

    The person responsible for the Scrum process, making sure it is used correctly and maximizes its benefits.
Team

    A cross-functional group of people responsible for managing itself to develop the product.
Scrum Team

    Product Owner, ScrumMaster and Team
### [edit] Artifacts

Sprint burn down chart

    Daily progress for a Sprint over the sprint's length.
Product backlog

    A prioritized list of high level requirements.
Sprint backlog

    A list of tasks to be completed during the sprint.
### [edit] Others

Sprint

    A time period (typically between two weeks and one month) in which development occurs on a set of backlog items that the Team has committed to.
Sashimi

    A slice of the whole equivalent in content to all other slices of the whole. For the Daily Scrum, the slice of sashimi is a report that something is done.
## [edit] Extended usage

Though Scrum was originally applied to software development only, it can also
be successfully used in other industries. Now Scrum is often viewed as an
iterative, incremental process for developing any product or managing any
work.

### [edit] Product development

Scrum as applied to product development was first referred to in "The New New
Product Development Game" (Harvard Business Review 86116:137â146, 1986) and
later elaborated in "The Knowledge Creating Company" both by Ikujiro Nonaka
and Hirotaka Takeuchi (Oxford University Press, 1995). Today there are records
of Scrum used to produce financial products, Internet products, and medical
products by ADM.

### [edit] Marketing project management methodology

As marketing is often executed in a project-based manner, a lot of generic
project management principles apply to marketing. Marketing can also be
optimized similar to project management techniques. Scrum approach to
marketing is believed to be helpful for overcoming problems experienced by
marketing executives. Short and regular meetings are important for small
marketing teams, as every member of a team has to know what the others are
working on and what direction the whole team is moving in. Scrum in marketing
makes it possible to:

  * See possible problems at early stages and allows coping with them quicker and with minimal losses. According to the key principle of Scrum "no problems are swept under the carpet", every team member is encouraged to describe the difficulties he is experiencing, as this might influence the work of the whole group.
  * Reduce financial risk. With the beginning of every sprint period, the business owner can change any of the marketing project parameters without penalty, including increasing investments to enlarge consumers' quantity, reducing investments until unknowns are mitigated, or financing other initiatives.
  * Make marketing planning flexible. Short-term marketing plans based on sprints can be much more effective. Marketing managers get an opportunity to switch from one promotion method to another, if the first one proved to be unsuccessful during the sprint period. It also becomes easier to clarify due dates of every small, but important, task to each member of a team.
  * Involve clients in various ways.

There is also a tendency to execute Scrum in marketing with the help of
Enterprise 2.0 technologies and Project management 2.0 tools.

## [edit] Videos

  * Jeff Sutherland in Scrum Tuning: Lessons learned from Scrum implementation at Google Retrieved 2007-12-15
  * Ken Schwaber in Scrum et al. Retrieved 2008-01-19
  * Jeff Sutherland in Hyperproductive Distributed Scrum Teams
  * Hamid Shojaee in Scrum in 10 Minutes (High Quality HD Video)
  * Jeff Sutherland in Self-Organization: The Secret Sauce for Improving your Scrum team
  * Millard Ellingsworth in Using the Scrum Process and Agile Estimating and Planning with Rational Team Concert

## [edit] See also

  * Kaizen
  * List of software development philosophies
  * Cowboy coding

Other Agile methods

  * Dynamic System Development Method
  * Feature Driven Development
  * Extreme programming (XP)
  * Software Development Rhythms

Tools

  * Agilo for Scrum
  * Rational Team Concert

## [edit] References

  1. ^ a b Schwaber, Ken (1 February 2004). Agile Project Management with Scrum. Microsoft Press. ISBN 978-0-735-61993-7.
  2. ^ Takeuchi, Hirotaka; Nonaka, Ikujiro (January-February 1986). "The New New Product Development Game" (PDF). Harvard Business Review. http://apln-richmond.pbwiki.com/f/New%20New%20Prod%20Devel%20Game.pdf. Retrieved on 2008-09-26.
  3. ^ DeGrace, Peter; Stahl, Leslie Hulet (1 October 1990). Wicked problems, righteous solutions. Prentice Hall. ISBN 978-0-135-90126-7.
  4. ^ Sutherland, Jeff (October 2004). "Agile Development: Lessons learned from the first Scrum" (PDF). http://jeffsutherland.com/scrum/FirstScrum2004.pdf. Retrieved on 2008-09-26.
  5. ^ Schwaber, p. 7
  6. ^ Schwaber, p. 135
  7. ^ Schwaber, p. 133
  8. ^ Sprint, Planning (January-February 2009) (html). Sprint Planning Rules. http://www.sprintplanning.com/SprintPlanningRules.htm. Retrieved on 2009-03-30.
  9. ^ Schwaber, p. 137
  10. ^ Schwaber, p. 138
  11. ^ Schwaber, pp. 141â143

## [edit] External links

Sister project Wikimedia Commons has media related to: Scrum  
  * Scrum Alliance
  * Agile Alliance's Scrum library
  * (PDF) Rising, L., Janoff, N.S. (2000). The Scrum Software Development Process for Small Teams Retrieved March 15, 2007
  * (PDF) Schwaber, K. Advanced Development Methods. SCRUM Development Process Retrieved August 15, 2006

v â¢ d â¢ e

Software engineering  
Fields

Requirements analysis â¢ Software design â¢ Computer programming â¢ Formal
methods â¢ Software testing â¢ Software deployment â¢ Software maintenance  
Concepts

Data modeling â¢ Enterprise architecture â¢ Functional specification â¢
Modeling language â¢ Programming paradigm â¢ Software â¢ Software
architecture â¢ Software development methodology â¢ Software development
process â¢ Software quality â¢ Software quality assurance â¢ Structured
analysis  
Orientations

Agile â¢ Aspect-oriented â¢ Object orientation â¢ Ontology â¢ Service
orientation â¢ SDLC  
Models

Development models: Agile â¢ Iterative model â¢ RUP â¢ Scrum â¢ Spiral
model â¢ Waterfall model â¢ XP â¢ V-Model  
Other models: CMMI â¢ Data model â¢ Function model â¢ IDEF â¢ Information
model â¢ Metamodeling â¢ Object model â¢ View model â¢ UML  
Software  
engineers

Kent Beck â¢ Grady Booch â¢ Fred Brooks â¢ Barry Boehm â¢ Ward Cunningham
â¢ Ole-Johan Dahl â¢ Tom DeMarco â¢ Edsger W. Dijkstra â¢ Martin Fowler
â¢ C. A. R. Hoare â¢ Watts Humphrey â¢ Michael A. Jackson â¢ Ivar Jacobson
â¢ Craig Larman â¢ James Martin â¢ Bertrand Meyer â¢ David Parnas â¢
Winston W. Royce â¢ James Rumbaugh â¢ Niklaus Wirth â¢ Edward Yourdon  
Related fields

Computer science â¢ Computer engineering â¢ Enterprise engineering â¢
History â¢ Management â¢ Mathematics â¢ Project management â¢ Quality
management â¢ Software ergonomics â¢ Systems engineering  
Retrieved from "http://en.wikipedia.org/wiki/Scrum_(development)"

Categories: Software development process | Agile software development |
Management | Production and manufacturing | Project management | Software
development philosophies | Software project management

Hidden categories: All articles with unsourced statements | Articles with
unsourced statements since January 2009

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * ÐÑÐ»Ð³Ð°ÑÑÐºÐ¸
  * Dansk
  * Deutsch
  * EspaÃ±ol
  * FranÃ§ais
  * íêµ­ì´
  * Italiano
  * ×¢××¨××ª
  * LietuviÅ³
  * Magyar
  * Nederlands
  * æ¥æ¬èª
  * âªNorsk (bokmÃ¥l)â¬
  * Polski
  * PortuguÃªs
  * Ð ÑÑÑÐºÐ¸Ð¹
  * Srpskohrvatski / Ð¡ÑÐ¿ÑÐºÐ¾Ñ ÑÐ²Ð°ÑÑÐºÐ¸
  * Suomi
  * Svenska
  * Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°
  * ä¸­æ

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 7 April 2009, at 20:51 (UTC).
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



