
# List of software engineering topics

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

<IMG>

The lists in this article may contain items that are not notable,
encyclopedic, or helpful. Please help out by removing such elements and
incorporating appropriate items into the main body of the article. (January
2008)  
This list complements the software engineering article, giving more details
and examples.

For an alphabetical listing of topics, please see List of software engineering
topics (alphabetical).

## Contents

  * 1 Technologies and practices
    * 1.1 Software engineering topics
      * 1.1.1 Programming languages
      * 1.1.2 Programming paradigm, based on a programming language technology
      * 1.1.3 Databases
      * 1.1.4 Graphical user interfaces
      * 1.1.5 Programming tools
      * 1.1.6 Libraries
      * 1.1.7 Design languages
      * 1.1.8 Patterns, document many common programming and project management techniques
      * 1.1.9 Processes and methodologies
      * 1.1.10 Platforms
      * 1.1.11 Other Practices
      * 1.1.12 Other tools
    * 1.2 Computer science topics
    * 1.3 Mathematics topics
    * 1.4 Life cycle phases
    * 1.5 Deliverables
    * 1.6 Business roles
    * 1.7 Management topics
    * 1.8 Business topics
  * 2 Community topics
    * 2.1 Pioneers
    * 2.2 Notable publications
    * 2.3 Professional topics
  * 3 Influence on society
    * 3.1 Applications
    * 3.2 Disasters
  * 4 Other terms
    * 4.1 Related fields
    * 4.2 Different languages
    * 4.3 Miscellaneous
  * 5 See also
  * 6 External links

  
## [edit] Technologies and practices

Skilled software engineers use technologies and practices from a variety of
fields to improve their productivity in creating software and to improve the
quality of the delivered product.

### [edit] Software engineering topics

Many technologies and practices are (mostly) confined to software engineering,
though many of these are shared with computer science.

#### [edit] Programming languages

  * List of programming languages
  * Scripting language
  * Assembly programming language
  * Ada
  * COBOL
  * Pascal
  * C
  * C++
  * C#
  * Clojure
  * Common Lisp
  * D
  * ColdFusion
  * Delphi
  * Dylan
  * Eiffel
  * Erlang
  * Fortran
  * F#
  * Groovy
  * Java
  * Lasso
  * ML
  * OCaml
  * Perl
  * PHP
  * PL/SQL
  * Prolog
  * Haskell
  * Python
  * Scheme
  * Smalltalk
  * Tcl
  * T-SQL
  * Visual Basic
  * Visual Basic .NET
  * Verilog
  * VHDL

#### [edit] Programming paradigm, based on a programming language technology

  * Aspect-oriented programming
  * Functional decomposition
  * Object-oriented programming
  * Post-object programming
  * Structured programming
  * Rule-based programming

#### [edit] Databases

  * Hierarchical
  * Object
  * Relational
  * SQL/XML
  * SQL

#### [edit] Graphical user interfaces

  * wxWidgets
  * Qt toolkit
  * GTK+ GIMP Toolkit
  * FLTK

#### [edit] Programming tools

  * Configuration management and source code management 
    * CVS
    * Subversion
    * Git
    * Mercurial
    * RCS
    * GNU Arch
    * LibreSource Synchronizer
  * Build tools 
    * Make
    * Ant
    * Nant
    * Maven
    * Final Builder
    * Visual Build Pro
  * Editors
    * IDEs
    * text editors
    * word processors
  * Parsers creation tools 
    * Yacc/Bison

#### [edit] Libraries

  * Software componentry

#### [edit] Design languages

  * UML

#### [edit] Patterns, document many common programming and project management
techniques

  * Anti-patterns
  * Patterns

#### [edit] Processes and methodologies

  * Agile 
    * Agile software development
    * Crystal Clear
    * Extreme programming
    * Lean software development
    * Rapid application development (RAD)
    * Scrum (in management)
  * Heavyweight 
    * Cleanroom
    * ISO 12207 â software life cycle processes
    * ISO 9000 and ISO 9001
    * Rational Unified Process
  * Process Models 
    * CMM and CMMI/SCAMPI
    * ISO 15504 (SPICE)

#### [edit] Platforms

A platform combines computer hardware and an operating system. As platforms
grow more powerful and less costly, applications and tools grow more widely
available.

  * BREW
  * Cray supercomputers
  * DEC minicomputers
  * IBM mainframes
  * GNU/Linux PCs
  * Mac OS and Mac OS X PCs
  * Microsoft .NET network software platform
  * Palm PDAs
  * Sun Microsystems Solaris
  * Windows PCs (Wintel)
  * Symbian OS

#### [edit] Other Practices

  * Communication
  * Pair programming
  * Performance Engineering
  * Programming productivity
  * Refactoring
  * Software inspections/Code reviews
  * Software reuse
  * Systems integration
  * Teamwork

#### [edit] Other tools

  * Decision tables
  * Feature
  * User stories
  * Use cases

### [edit] Computer science topics

Skilled software engineers know a lot of computer science including what is
possible and impossible, and what is easy and hard for software.

  * Algorithms, well-defined methods for solving specific problems. 
    * Searching
    * Sorting
    * Parsing
    * Numerical analysis
  * Compiler theory
    * Yacc/Bison
  * Data structures, well-defined methods for storing and retrieving data. 
    * Lists
    * Trees
    * Hash tables
  * Computability, some problems cannot be solved at all 
    * Halting problem
  * Complexity, some problems are solvable in principle, yet unsolvable in practice 
    * NP completeness
    * Computational complexity theory
  * Formal methods
    * Proof of correctness
    * Program synthesis
  * Adaptive Systems
    * Neural Networks
    * Evolutionary Algorithms

### [edit] Mathematics topics

Discrete mathematics is a key foundation of software engineering.

  * Number representation
  * Set (computer science)
  * Bags
  * Graphs
    * Sequences
    * Trees
    * Graphs
  * Logic
    * Deduction
    * First-order logic
    * Higher-order logic
    * Combinatory logic
  * Induction
  * Combinatorics

Other

  * Domain knowledge
  * Statistics
  * Decision theory
  * Type theory

### [edit] Life cycle phases

  * Development life cycle phase
    * Requirements gathering / analysis
    * Software architecture
    * Computer programming
    * Testing, detects bugs
      * Black box testing
      * White box testing
      * Clear box testing
    * Quality assurance, ensures compliance with process.
  * Product Life cycle phase and Project lifecycle
    * Inception
    * First development
    * Major release
    * Minor release
    * Bug fix release
    * Maintenance
    * Obsolescence
  * Release development stage, near the end of a release cycle 
    * Alpha
    * Beta
    * Gold master
    * 1.0; 2.0
  * Software development lifecycle
    * Waterfall model â Structured programming and Stepwise refinement
    * SSADM
    * Spiral model â Iterative development
    * V-model
    * Agile software development
    * DSDM
    * Chaos model â Chaos strategy

### [edit] Deliverables

Deliverables must be developed for many SE projects. Software engineers rarely
make all of these deliverables themselves. They usually cooperate with the
writers, trainers, installers, marketers, technical support people, and others
who make many of these deliverables.

  * Application software â the software
  * Database â schemas and data.
  * Documentation, online and/or print, FAQ, Readme, release notes, Help, for each role 
    * User
    * Administrator
    * Manager
    * Buyer
  * Administration and Maintenance policy, what should be backed-up, checked, configured, ...
  * Installers
  * Migration 
    * Upgrade from previous installations
    * Upgrade from competitor's installations
  * Training materials, for each role 
    * User
    * Administrator
    * Manager
    * Buyer
  * Support info for computer support groups.
  * Marketing and sales materials 
    * White papers, explain the technologies used in the applications
    * Comparisons with competitor products

### [edit] Business roles

  * Operations
    * Users
    * Administrators
    * Managers
    * Buyers
  * Development 
    * Analysts
    * Programmers
    * Testers
    * Managers
  * Business
    * Consulting â customization and installation of applications
    * Sales
    * Marketing
    * Legal â contracts, intellectual property rights
    * Support â helping customers use applications
    * Personnel â hiring and training qualified personnel
    * Finance â funding new development
  * Academe
    * Educators
    * Researchers

### [edit] Management topics

  * Leadership
    * Coaching
    * Communication
    * Listening
    * Motivation
    * Vision, SEs are good at this
    * Example, everyone follows a good example best
  * Human resource management
    * Hiring, getting people into an organization
    * Staffing, getting people onto a project
    * Training
    * Evaluation
  * Project management
    * Goal setting
    * Customer interaction (Rethink)
    * Estimation
    * Risk management
    * Change management
  * Process management
    * Processes
      * Software development processes
    * Metrics

### [edit] Business topics

  * Quality programs 
    * Malcolm Baldrige National Quality Award
    * Six Sigma
    * Total Quality Management (TQM)

## [edit] Community topics

### [edit] Pioneers

Many people made important contributions to SE technologies, practices, or
applications.

  * John Backus: Fortran, first optimizing compiler, BNF
  * Vic Basili: Experience factory.
  * F.L. Bauer: Stack principle, popularized the term Software Engineering
  * Kent Beck: Refactoring, extreme programming, pair programming, test-driven development.
  * Tim Berners-Lee: World wide web
  * Barry Boehm: SE economics, COCOMO, Spiral model.
  * Grady Booch: Object-oriented design, UML.
  * Fred Brooks: Managed System 360 and OS 360. Wrote The Mythical Man-Month and No Silver Bullet.
  * Larry Constantine: Structured design, coupling, cohesion
  * Edsger Dijkstra: Wrote Notes on Structured Programming, A Discipline of Programming and Go To Statement Considered Harmful, algorithms, formal methods, pedagogy.
  * Michael Fagan: Software inspection.
  * Tom Gilb: Software metric, Software inspection, Evolutionary processes.
  * Grace Hopper: The first compiler (Mark 1), COBOL, Nanoseconds.
  * Watts Humphrey: Capability Maturity Model, Personal Software Process, fellow of the Software Engineering Institute.
  * Jean Ichbiah: Ada
  * Michael A. Jackson: Jackson Structured Programming, Jackson System Development
  * Bill Joy: Berkeley Unix, vi, Java.
  * Brian Kernighan: C and Unix.
  * Donald Knuth: Wrote The Art of Computer Programming, TeX, algorithms, literate programming
  * Bertrand Meyer: Design by Contract, Eiffel programming language.
  * Peter G. Neumann: RISKS Digest, ACM Sigsoft.
  * David Parnas: Module design, social responsibility, professionalism.
  * Jef Raskin: Developed the original Macintosh GUI
  * Dennis Ritchie: C and Unix.
  * Winston W. Royce: Waterfall model.
  * Mary Shaw: Software architecture.
  * Richard Stallman: Founder of the Free Software Foundation
  * Linus Torvalds: Linux kernel, free software / open source development.
  * Will Tracz: Reuse, ACM Software Engineering Notes.
  * Gerald Weinberg: Wrote The Psychology of Computer Programming.
  * Jeanette Wing: Formal specifications.
  * Ed Yourdon: Structured programming, wrote The Decline and Fall of the American Programmer.

See also

  * List of programmers
  * List of computer scientists
  * List of software moguls

### [edit] Notable publications

  * About Face: The Essentials of User Interface Design by Alan Cooper, about user interface design. ISBN 0-7645-2641-3
  * The Capability Maturity Model by Watts Humphrey. Written for the Software Engineering Institute, emphasizing management and process. (See Managing the Software Process ISBN 0-201-18095-2)
  * The Cathedral and the Bazaar by Eric Raymond about open source development.
  * The Decline and Fall of the American Programmer by Ed Yourdon predicts the end of software development in the U.S. ISBN 0-13-191958-X
  * Design Patterns by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. ISBN 0-201-63361-2
  * Extreme Programming Explained by Kent Beck ISBN 0-321-27865-8
  * "Go To Statement Considered Harmful" by Edsger Dijkstra.
  * Internet, Innovation and Open Source:Actors in the Network â First Monday article by Ilkka Tuomi (2000) source
  * The Mythical Man-Month by Fred Brooks, about project management. ISBN 0-201-83595-9
  * Object-oriented Analysis and Design by Grady Booch. ISBN 0-8053-5340-2
  * Peopleware by Tom DeMarco and Tim Lister. ISBN 0-932633-43-9
  * Principles of Software Engineering Management by Tom Gilb about evolutionary processes. ISBN 0-201-19246-2
  * The Psychology of Computer Programming by Gerald Weinberg. Written as an independent consultant, partly about his years at IBM. ISBN 0-932633-42-0
  * Refactoring: Improving the Design of Existing Code by Martin Fowler, Kent Beck, John Brant, William Opdyke, and Don Roberts. ISBN 0-201-48567-2
  * The Pragmatic Programmer: from journeyman to master by Andrew Hunt, and David Thomas. ISBN 0-201-61622-X

See also:

  * Important publications in software engineering in CS.

### [edit] Professional topics

  * Software engineering demographics
  * Software engineering economics
  * CCSE
  * History of software engineering
  * Software engineering professionalism
    * Ethics
    * Licensing
  * Legal
    * Intellectual property
    * Consumer protection

## [edit] Influence on society

Software engineers affect society by creating applications. These applications
produce value for users, and sometimes produce disasters.

### [edit] Applications

Software engineers build software (applications, operating systems, system
software) that people use.

Applications influence software engineering by pressuring developers to solve
problems in new ways. For example, consumer software emphasizes low cost,
medical software emphasizes high quality, and Internet commerce software
emphasizes rapid development.

  * Business software
    * Accounting software
    * Docketing software
  * Analytics
    * Data mining closely related to database
    * Decision support systems
  * Airline reservations
  * Banking
    * Automatic teller machines
    * Cheque processing
    * Credit cards
  * Commerce
    * Trade
    * Auctions (eg. EBay)
    * Reverse auctions (procurment)
    * Bar code scanners
  * Compilers
    * Parsers
    * Compiler optimization
    * Interpreters
    * Linkers
    * Loaders
  * Communication
    * E-mail
    * Instant messengers
    * VOIP
    * Calendars â scheduling and coordinating
    * Contact managers
  * Computer graphics
    * Animation
    * Special effects for video and film
    * Editing
    * Post-processing
  * Cryptography
  * Databases, support almost every field
  * Embedded systems Both software engineers and traditional engineers write software control systems for embedded products. 
    * Automotive software
    * Avionics software
    * Heating Ventilation and Air Conditioning (HVAC) software
    * Medical device software
    * Telephony
    * Telemetry
  * Engineering All traditional engineering branches use software extensively. Engineers use spreadsheets, more than they ever used calculators. Engineers use custom software tools to design, analyze, and simulate their own projects, like bridges and power lines. These projects resemble software in many respects, because the work exists as electronic documents and goes through analysis, design, implementation, and testing phases. Software tools for engineers use the tenets of computer science; as well as the tenets of calculus, physics, and chemistry. 
    * Computer Aided Design (CAD)
    * Electronic Design Automation (EDA)
    * Numerical Analysis
    * Simulation
  * File
    * FTP
    * File sharing
    * File synchronization
  * Finance
    * Bond market
    * Futures market
    * Stock market
  * Games
    * Poker
    * Multiuser Dungeons
    * Video games
  * Information systems, support almost every field 
    * LIS Management of laboratory data
    * MIS Management of financial and personnel data
  * Logistics
    * Supply chain management
  * Manufacturing
    * Computer Aided Manufacturing (CAM)
    * Distributed Control Systems (DCS)
  * Music
    * Music sequencers
    * Sound effects
    * Music synthesis
  * Network Management
    * Network management system
    * Element Management System
    * Operations Support System
    * Business Support Systems
  * Networks and Internet
    * Domain Name System
    * Protocols
    * Routers
  * Office suites
    * Word processors
    * Spreadsheets
    * Presentations
  * Operating systems
    * Embedded
    * Graphical
    * Multitasking
    * Real-time
  * Robotics
  * Signal processing, encoding and interpreting signals 
    * Image processing, encoding and interpreting visual information
    * Speech processing
    * Text recognition
    * Handwriting recognition
  * Simulation, supports almost every field. 
    * Engineering, A software simulation can be cheaper to build and more flexible to change than a physical engineering model.
    * Sciences
  * Sciences
    * Genomics
  * Traffic Control
    * Air traffic control
    * Ship traffic control
    * Road traffic control
  * Training
    * Drill
    * Simulation
    * Testing
  * Visualization, supports almost every field 
    * Architecture
    * Engineering
    * Sciences
  * Voting
  * World wide web
    * Browsers
    * Servers

### [edit] Disasters

Software has played a role in many high-profile disasters.

  * Ariane 5 Flight 501
  * Mars probe
  * Denver International Airport
  * TAURUS â UK share settlement system and dematerialised central share depository.
  * Therac-25 â A radiation therapy machine responsible for six overdoses due to faulty software.
  * Airbus A320 â[citation needed] The Airbus A320, while was controversial in software engineering circles, being the first civilian Fly-by-wire aircraft. In the Airbus flight control systems, the computer has the final say on all decisions, meaning the safety of passengers depends upon the accuracy of the software specification, and the competence of the engineering teams producing the (multiple, independent) software stacks. The Strasbourg A320 crash of Jan 21, 1992 is partially related to software in that poor user interface design was a contributing factor.
  * Failure at Dharan â Patriot Missile clock issue.

  

## [edit] Other terms

### [edit] Related fields

  * Information technology
  * Traditional engineering
    * Computer engineering
    * Electrical engineering
  * Software engineering 
    * Domain engineering
    * Information engineering
    * Knowledge engineering
    * User interface engineering
    * Web engineering
  * Arts and Sciences
    * Mathematics
    * Computer science
    * Information science
  * Application software 
    * Information systems
  * Programming

### [edit] Different languages

  * In Arabic , software engineering is called handast albrmjeyat (ÙÙØ¯Ø³Ø© Ø§ÙØ¨Ø±Ù Ø¬ÙØ§Øª).
  * In Chinese, software engineering is called ruÇnjiÃ n gÅngchÃ©ng(è½¯ä»¶å·¥ç¨ è½¯ä»¶å·¥ç¨)
  * In Danish, software engineering is called Software ingeniÃ¸r.
  * In French, software engineering is called GÃ©nie logiciel.

  * In Persian, software engineering is called Ù ÙÙØ¯Ø³Û ÙØ±Ù âØ§ÙØ²Ø§Ø±.

  * In German, software engineering is called Softwaretechnik.
  * In Hebrew, software engineering is called ×× ××¡×ª ×ª××× ×.
  * In Icelandic, software engineering is called HugbÃºnaÃ°arverkfrÃ¦Ã°i.
  * In Italian, software engineering is called Ingegneria del software,
  * In Korean, software engineering is called ìíí¸ì¨ì´ ê³µí,
  * In Norwegian, software engineering is called Programvareutvikling.
  * In Polish, software engineering is called InÅ¼ynieria oprogramowania.
  * In Portuguese, software engineering is called Engenharia de software,
  * In Spanish, software engineering is called IngenierÃ­a del software,
  * In Turkish, software engineering is called yazÄ±lÄ±m mÃ¼hendisliÄi.
  * In Greek, software engineering is called ÏÎµÏÎ½Î¿Î»Î¿Î³Î¯Î± Î»Î¿Î³Î¹ÏÎ¼Î¹ÎºÎ¿Ï.

### [edit] Miscellaneous

  * Complexity or scaling
  * Software brittleness problem
  * Second system syndrome
  * Software specialists share common language, terminology, certification, and so on.
  * Traditional engineers frequently resort to a balance of factors to achieve optimization.
  * Biology and biological engineering have other issues.
  * Source code escrow
  * Feature interaction problem
  * Certification (software engineering)

## [edit] See also

  * List of basic software engineering topics
  * SWEBOK Software engineering body of knowledge
  * CCSE Computing curriculum for software engineering
  * Computer terms etymology, the origins of computer terms

## [edit] External links

  * Professional organizations: 
    * British Computer Society
    * Association for Computing Machinery
    * IEEE Computer Society
  * Professionalism
    * SE Code of Ethics
    * Professional licensing in Texas
  * Education
    * CCSE Undergraduate curriculum
  * Standards: 
    * IEEE Software Engineering Standards
    * Internet Engineering Task Force
    * ISO
  * Government organizations: 
    * European Software Institute
    * Software Engineering Institute
  * Agile: 
    * Organization to promote Agile software development
    * Test driven development
    * Extreme programming
  * Other organizations: 
    * Online community for software engineers
    * Software Engineering Society
  * Demographics
    * U.S. Bureau of Labor Statistics on SE
  * Surveys: 
    * David Redmiles page from the University of California site
  * Other: 
    * Full text in PDF from the NATO conference in Garmisch
    * Computer Risks Peter G. Neumann's risks column.

v â¢ d â¢ e

Software engineering  
Fields

Requirements analysis â¢ Software design â¢ Computer programming â¢ Formal
methods â¢ Software testing â¢ Software deployment â¢ Software maintenance  
Concepts

Data modeling â¢ Enterprise architecture â¢ Functional specification â¢
Modeling language â¢ Programming paradigm â¢ Software â¢ Software
architecture â¢ Software development methodology â¢ Software development
process â¢ Software quality â¢ Software quality assurance â¢ Structured
analysis  
Orientations

Agile â¢ Aspect-oriented â¢ Object orientation â¢ Ontology â¢ Service
orientation â¢ SDLC  
Models

Development models: Agile â¢ Iterative model â¢ RUP â¢ Scrum â¢ Spiral
model â¢ Waterfall model â¢ XP â¢ V-Model  
Other models: CMMI â¢ Data model â¢ Function model â¢ IDEF â¢ Information
model â¢ Metamodeling â¢ Object model â¢ View model â¢ UML  
Software  
engineers

Kent Beck â¢ Grady Booch â¢ Fred Brooks â¢ Barry Boehm â¢ Ward Cunningham
â¢ Ole-Johan Dahl â¢ Tom DeMarco â¢ Edsger W. Dijkstra â¢ Martin Fowler
â¢ C. A. R. Hoare â¢ Watts Humphrey â¢ Michael A. Jackson â¢ Ivar Jacobson
â¢ Craig Larman â¢ James Martin â¢ Bertrand Meyer â¢ David Parnas â¢
Winston W. Royce â¢ James Rumbaugh â¢ Niklaus Wirth â¢ Edward Yourdon  
Related fields

Computer science â¢ Computer engineering â¢ Enterprise engineering â¢
History â¢ Management â¢ Mathematics â¢ Project management â¢ Quality
management â¢ Software ergonomics â¢ Systems engineering  
Retrieved from
"http://en.wikipedia.org/wiki/List_of_software_engineering_topics"

Categories: Software engineering | Computer lists | Topical indexes

Hidden categories: Cleanup from January 2008 | Wikipedia laundry list cleanup
| All articles with unsourced statements | Articles with unsourced statements
since February 2007

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * ä¸­æ

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 25 April 2009, at 13:20 (UTC).
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



