
# Universal Turing machine

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

    This article is a supplement to the article Turing machine.
Alan Turing's universal computing machine (alternately universal machine,
machine U, U) is the name given by him (1936-1937) to his model of an all-
purpose "a-machine" (computing machine) that could process any arbitrary (but
well-formed) sequence of instructions called quintuples. This model is
considered by some (for example, Davis (2000)) to be the origin of the stored
program computer -- used by John von Neumann (1946) for his "Electronic
Computing Instrument" that now bears von Neumann's name: the von Neumann
architecture.

This machine as a model of computation is now called the Universal Turing
machine.

## Contents

  * 1 Introduction
  * 2 Stored-program computer
  * 3 Mathematical theory
  * 4 Example of universal-machine coding
  * 5 References

  
## [edit] Introduction

<IMG>

Every Turing machine computes a certain fixed partial computable function from
the input strings over its alphabet. In that sense it behaves like a computer
with a fixed program. However, we can encode the action table of any Turing
machine in a string. Thus we can construct a Turing machine that expects on
its tape a string describing an action table followed by a string describing
the input tape, and computes the tape that the encoded Turing machine would
have computed. Turing described such a construction in some detail in his 1936
paper.

In 1947, Turing said:

> It can be shown that a single special machine of that type can be made to do
the work of all. It could in fact be made to work as a model of any other
machine. The special machine may be called the universal machine.

## [edit] Stored-program computer

Davis (2000) makes a persuasive argument that Turing's conception of what is
now known as "the stored-program computer", of placing the "action table" --
the instructions for the machine -- in the same "memory" as the input data,
strongly influenced John von Neumann's conception of the first discrete-symbol
(as opposed to analog) computer -- the EDVAC. Davis quotes Time magazine to
this effect, that "everyone who taps at a keyboard... is working on an
incarnation of a Turing machine," and that "John von Neumann [built] on the
work of Alan Turing" (Davis (2000) p. 193 quoting Time magazine (29 March
1999)).

Davis makes a case that Turing's Automatic Computing Engine (ACE) computer
"anticipated" the notions of microprogamming (microcode) and RISC processors
(cf p. 188)). Knuth (1973, 1968) cites Turing's work on the ACE computer as
designing "hardware to facilitate subroutine linkeage" (p. 225); Davis (2000)
also references this work as Turing's use of a hardware "stack" (cf footnote
18 page 237).

As the Turing Machine was encouraging the construction of computers, the UTM
was encouraging the development of the fledgling computer sciences. An early,
if not the very first, assembler was proposed "by a young hot-shot programmer"
for the EDVAC (Davis 2000, p. 192). Von Neumann's "first serious program ...
[was] to simply sort data efficiently" (Davis 2000, p. 184). Knuth observes
that the subroutine return embedded in the program itself rather than in
special registers is attributable to von Neumann and Goldstine (in particular:
Burks, Goldstine, von Neumann (1946), Preliminary discussion of the logical
design of an electronic computing instrument, reprinted in Bell and Newell
1971). Knuth furthermore states that

    "The first interpretive routine may be said to be the "Universal Turing Machine" ... Interpretive routines in the conventional sense were mentioned by John Mauchly in his lectures at the Moore School in 1946 ... Turing took part in this development also; interpretive systems for the Pilot ACE computer were written under his direction" (Knuth p. 226).
Davis (2000) briefly mentions operating systems and compilers as outcomes of
the notion of program-as-data (p. 185).

Some, however, might raise issues with this assessment. At the time
(mid-1940's to mid-1950's) a relatively small cadre of researchers were
intimately involved with the architecture of the new "digital computers". Wang
(1954), a young researcher at this time, made the following observation:

    Turing's theory of computable functions antedated but has not much influenced the extensive actual construction of digital computers. These two aspects of theory and practice have been developed almost entirely independently of each other. The main reason is undoubtedly that logicians are interested in questions radically different from those with which the applied mathematicians and electrical engineers are primarily concerned. It cannot, however, fail to strike one as rather strange that often the same concepts are expressed by very different terms in the two developments." (Wang (1954, 1957), p. 63)
Wang hoped that his paper would "connect the two approaches." Indeed, Minsky
(1967) confirms this: "that the first formulation of Turing-machine theory in
computer-like models appears in Wang (1957)" (Minsky p. 200). Minsky goes on
to demonstrate Turing equivalence of a counter machine.

With respect to the reduction of computers to simple Turing equivalent models
(and vice versa), Wang 's (1957) title of "the first" is open to debate. While
both Minsky's paper of 1961 and Wang's paper of 1957 are cited by Shepherdson
and Sturgis (1963), they also cite and summarize in some detail the work of
European mathematicians Kaphenst (1959), Ershov (1959), and PÃ©ter (1958). The
names of mathematicians Hermes (1954, 1955, 1961) and Kaphenst (1959) appear
in the bibliographies of both Sheperdson-Sturgis (1963) and Elgot-Robinson
(1961). Two other names of importance are Canadian researchers Melzak (1961)
and Lambek (1961). For much more see Turing machine equivalents; references
can be found at Register machine.

  

## [edit] Mathematical theory

With this encoding of action tables as strings it becomes possible in
principle for Turing machines to answer questions about the behaviour of other
Turing machines. Most of these questions, however, are undecidable, meaning
that the function in question cannot be calculated mechanically. For instance,
the problem of determining whether any particular Turing machine will halt on
a particular input, or on all inputs, known as the Halting problem, was shown
to be, in general, undecidable in Turing's original paper. Rice's theorem
shows that any non-trivial question about the behaviour or output of a Turing
machine is undecidable.

A universal Turing machine can calculate any recursive function, decide any
recursive language, and accept any recursively enumerable language. According
to the Church-Turing thesis, the problems solvable by a universal Turing
machine are exactly those problems solvable by an algorithm or an effective
method of computation, for any reasonable definition of those terms. For these
reasons, a universal Turing machine serves as a standard against which to
compare computational systems, and a system that can simulate a universal
Turing machine is called Turing complete.

An abstract version of the universal Turing machine is the universal function,
a computable function which can be used to calculate any other computable
function. The utm theorem proves the existence of such a function.

When Alan Turing came up with the idea of a universal machine he had in mind
the simplest computing model powerful enough to calculate all possible
functions which can be calculated. Claude Shannon first explicitly posed the
question of finding the smallest possible universal Turing machine when in
1956 he showed that two symbols were sufficient, so long as enough states were
used. Shannon himself proved that it was always possible to exchange states by
symbols.

After some time, the smallest known universal Turing machine was due to Marvin
Minsky who in 1962 discovered a 7-state 4-symbol universal Turing machine
using 2-tag systems. Applying Shannon's result to Minsky's UTM upon conversion
to a 2-symbol machine Minsky machine would require 43 states.

Other smaller universal Turing machines have since been found. If we denote by
(m,n) the class of UTMs with m states and n symbols the following tuples were
found by Yurii Rogozhin in 1996: (24, 2), (10, 3), (7, 4), (5, 5), (4, 6), (3,
10), and (2, 18). In 1985, Stephen Wolfram conjectured a 2-state 5-symbol
universal Turing machine. This conjecture was proved by Matthew Cook working
as a research assistant to Stephen Wolfram. The model, also known as Rule 110
Elementary Cellular Automaton had, at the time, the smallest product (2,5)=10
of any known universal Turing machine. According to Wolfram other smaller UTMs
should exist and he proposed a 2-state 3-symbol Turing Machine as a candidate.
On 24 Oct 2007, Wolfram announced the Turing equivalence of the system had
been proven by Alex Smith \-- an undergraduate studying electronic and
computer engineering at the University of Birmingham \-- responding to a
contest established by Wolfram.[1] However, on 2007-10-29 Vaughan Pratt of
Stanford University announced that he discovered a flaw in the proof.[2]
Wolfram Research disputes Pratt's interpretation.[3]

## [edit] Example of universal-machine coding

    For those who would undertake the challenge of designing a UTM exactly as Turing specified see the article in Copeland (2004) written by Davies (pp. 103ff). Davies corrects the errors in the original and shows what a sample run would look like. He claims to have successfully run a (somewhat simplified) simulation.
The following example is taken from Turing (1936). For more about this example
see the page Turing machine examples.

Turing used seven symbols { A, C, D, R, L, N, ; } to encode each 5-tuple; as
described in the article Turing machine, his 5-tuples are only of types N1,
N2, and N3. The number of each "m-configuration" (instruction, state) is
represented by "D" followed by a unary string of A's, i.e. "q3" = DAAA. In a
similar manner he encodes the symbols blank as "D", the symbol "0" is "DC",
the symbol "1" as DCC, etc. The symbols "R", "L", and "N" remain as is.

After encoding each 5-tuple is then "assembled" into a string in order as
shown in the following table:

Current m-configuration Tape symbol Print-operation Tape-motion Final
m-configuration Current m-configuration code Tape symbol code Print-operation
code Tape-motion code Final m-configuration code 5-tuple assembled code  
q1 blank P0 R q2 DA D DC R DAA DADDCRDAA  
q2 blank E R q3 DAA D D R DAAA DAADDRDAAA  
q3 blank P1 R q4 DAAA D DCC R DAAAA DAAADDCCRDAAAA  
q4 blank E R q1 DAAAA D D R DA DAAAADDRDA  
Finally, the codes for all four 5-tuples are strung together into a code
started by ";" and separated by ";" i.e.:

    ;DADDCRDAA;DAADDRDAAA;DAAADDCCRDAAAA;DAAAADDRDA
This code he placed on alternate squares -- the "F-squares" -- leaving the
"E-squares" (those liable to erasure) empty. The final assembly of the code on
the tape for the U-machine consists of placing two special symbols ("e") one
after the other, then the code separated out on alternate squares, and lastly
the double-colon symbol "::" (blanks shown here with "." for clarity):

    ee.;.D.A.D.D.C.R.D.A.A.;.D.A.A.D.D.R.D.A.A.A.;.D.A.A.A.D.D.C.C.R.D.A.A.A.A.;.D.A.A.A.A.D.D.R.D.A.::......
The U-machine's action-table (state-transition table) is responsible for
decoding the symbols. Turing's action table keeps track of its place with
markers "u", "v", "x", "y", "z" by placing them in "E-squares" to the right of
"the marked symbol" -- for example, to mark the current instruction z is
placed to the right of ";" x is keeping the place with respect to the current
"m-configuration" DAA. The U-machine's action table will shuttle these symbols
around (erasing them and placing them in different locations) as the
computation progresses:

    ee.; .D.A.D.D.C.R.D.A.A. ; zD.A.AxD.D.R.D.A.A.A.;.D.A.A.A.D.D.C.C.R.D.A.A.A.A.;.D.A.A.A.A.D.D.R.D.A.::......
Turing's action-table for his U-machine is very involved.

A number of other commentators (notably Penrose 1990) provide examples of ways
to encode instructions for the Universal machine. As does Penrose, most
commentators use only binary symbols i.e. only symbols { 0, 1 }. Penrose goes
further and writes out his entire U-machine code (pages 71-73 -- he asserts
that it truly is a U-machine code), an enormous number that spans almost 2
full pages of 1's and 0's. For readers interested in simpler encodings for the
Post-Turing machine the discussion of Davis in (Steen, 1980, p.251ff) may be
useful.

## [edit] References

  * Boolos, George; Burgess, John; Jeffrey, Richard (2002), Computability and Logic (4th ed.), Cambridge UK: Cambridge University Press, ISBN 0-521-00758-5 (pb.)

  * Copeland, Jack, ed. (2004), The Essential Turing: Seminal Writings in Computing, Logic, Philosophy, Artificial Intelligence, and Artificial Life plus The Secrets of Enigma, Oxford UK: Oxford University Press, ISBN 0-19-825079-7

  * Davis, Martin (1958), Computability and Unsolvability, New York NY: McGraw-Hill Book Company . On pages 12-20 he gives examples of 5-tuple tables for Addition, The Successor Function, Subtraction (x > = y), Proper Subtraction (0 if x < y), The Identity Function and various identity functions, and Multiplication.
  * Davis, Martin, ed. (1965), The Undecidable, Hewlett NY: Raven Press

  * Davis, Martin (1980), "What is Computation?", in Steen, Lynn Arthur, Mathematics Today: Twelve Informal Essays, New York NY: Vintage Books (Random House), ISBN 978-0394745039 .

  * Davis, Martin (2000), Engines of Logic: Mathematicians and the origin of the Computer (1st ed.), New York NY: W. W. Norton & Company, ISBN 0-393-32229-7 (pb.)

  * Herken, Rolf, The Universal Turing Machine â A Half-Century Survey, Springer Verlag, ISBN 3-211-82637-8

  * Kleene, Stephen (1952), Introduction to Metamathematics, Amsterdam Netherlands: North-Holland Publishing Company , 10th impression (with corrections of 6th reprint 1971). Graduate level text; most of Chapter XIII Computable functions is on Turing machine proofs of computability of recursive functions, etc.

  * Minsky, Marvin (1962), Size and Structure of Universal Turing Machines using Tag Systems, Recursive Function Theory, , Proc. Symp. Pure Mathematics (Providence RI: American Mathematical Society) 5: 229â238

  * Penrose, Roger (1999), The Emperor's New Mind, Oxford UK: Oxford University Press, ISBN 0-19-286198-0 (pb.)

  * Post, Emil (1936), Finite Combinatory Processes - Formulation 1, "Finite Combinatory Processes-Formulation 1", Journal of Symbolic Logic 1: 103â105, doi:10.2307/2269031 . Reprinted in The Undecidable pp.289ff.

  * Post, Emil (1947), Recursive Unsolvability of a Problem of Thue, "Recursive Unsolvability of a Problem of Thue", Journal of Symbolic Logic 12: 1â11, doi:10.2307/2267170 . Reprinted in The Undecidable pp.293ff. In the Appendix of this paper Post comments on and gives corrections to (Turing 1936).

  * Rogozhin, Yurii (1998), A Universal Turing Machine with 22 States and 2 Symbols, , Romanian Journal of Information Science and Technology 1 (3): 259â265 . (surveys known results about small universal Turing machines)

  * Shannon, Claude (1956), "A Universal Turing Machine with Two Internal States", Automata Studies, Princeton, NJ: Princeton University Press, pp. 157â165

  * Turing, Alan (1936), On Computable Numbers, With an Application to the Entscheidungsproblem, , Proceedings of the London Mathematical Society 42 (2) (and Turing, A.M. (1937), "On Computable Numbers, with an Application to the Entscheidungsproblem: A correction", Proceedings of the London Mathematical Society, 2 43: 544â6 ). Reprinted in The Undecidable pp.115-154.

  * Wolfram, Stephen (2002), A New Kind of Science, Wolfram Research, pp. 706â714, ISBN 1-57955-008-8, http://www.wolframscience.com/nksonline/toc.html

Retrieved from "http://en.wikipedia.org/wiki/Universal_Turing_machine"

Categories: Educational abstract machines | Theoretical computer science |
Computational models | Alan Turing

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Hrvatski
  * Italiano
  * PortuguÃªs
  * Ð ÑÑÑÐºÐ¸Ð¹
  * ä¸­æ

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 4 April 2009, at 13:55 (UTC).
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



