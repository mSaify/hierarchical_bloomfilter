
# Finite impulse response

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

A finite impulse response (FIR) filter is a type of a digital filter. The
impulse response, the filter's response to a Kronecker delta input, is
'finite' because it settles to zero in a finite number of sample intervals.
This is in contrast to infinite impulse response (IIR) filters which have
internal feedback and may continue to respond indefinitely. The impulse
response of an Nth order FIR filter lasts for N+1 samples, and then dies to
zero.

## Contents

  * 1 Definition
  * 2 Impulse response and transfer function
  * 3 Properties
  * 4 Filter design
  * 5 Moving average example
  * 6 See also
  * 7 References
  * 8 External links

  
## [edit] Definition

<IMG>

This section reads like a textbook and may need a cleanup.  
Please help to improve this article to make it neutral in tone and meet
Wikipedia's quality standards.  
We start the discussion by stating the difference equation which defines how
the input signal is related to the output signal

    \\ y\[n\]=b_0 x\[n\] + b_1 x\[n-1\] + \\cdots + b_N x\[n-N\]
where x[n] is the input signal, y[n] is the output signal and bi are the
filter coefficients. N is known as the filter order; an Nth-order filter has
(N \+ 1) terms on the right-hand side; these are commonly referred to as taps.

The previous equation can also be expressed as a convolution of filter
coefficients and the input signal.

    \\ y\[n\] = \\sum_{i=0}^{N} b_i x\[n-i\].
## [edit] Impulse response and transfer function

To find the impulse response we set

    \\ x\[n\] = \\delta\[n\]
where Î´[n] is the Kronecker delta impulse. The impulse response for an FIR
filter is the set of coefficients bn, as follows

    
\\begin{align}

  h\[n\] &= \\sum_{i=0}^{N}b_i \\delta\[n-i\]  \\\\

       &= b_n.
\\end{align}

for \\ n = 0 to \\ N.

The Z-transform of the impulse response yields the transfer function of the
FIR filter

    
\\begin{align}

  H\(z\) &= Z\\{h\[n\]\\}  \\\\

       &= \\sum_{n=-\\infty}^{\\infty} h\[n\] z^{-n}  \\\\
       &= \\sum_{n=0}^{N}b_n\\,z^{-n}.
\\end{align}

FIR filters are clearly bounded-input bounded-output (BIBO) stable, since the
output is a sum of a finite number of finite multiples of the input values, so
can be no greater than \\sum |b_i| times the largest value appearing in the
input.

## [edit] Properties

An FIR filter has a number of useful properties which sometimes make it
preferable to an infinite impulse response (IIR) filter. FIR filters:

  * Are inherently stable. This is due to the fact that all the poles are located at the origin and thus are located within the unit circle.
  * Require no feedback. This means that any rounding errors are not compounded by summed iterations. The same relative error occurs in each calculation. This also makes implementation simpler.
  * They can be designed to be linear phase, which means the phase change is proportional to the frequency. This is usually desired for phase-sensitive applications, for example crossover filters, and mastering, where transparent filtering is adequate.

The main disadvantage of FIR filters is that considerably more computation
power is required compared with a similar IIR filter. This is especially true
when low frequencies (relative to the sample rate) are to be affected by the
filter.

## [edit] Filter design

To design a filter means to select the coefficients such that the system has
specific characteristics. The required characteristics are stated in filter
specifications. Most of the time filter specifications refer to the frequency
response of the filter. There are different methods to find the coefficients
from frequency specifications:

  1. Window design method
  2. Frequency Sampling method
  3. Weighted least squares design
  4. Minimax design
  5. Equiripple design. The Remez exchange algorithm is commonly used to find an optimal equiripple set of coefficients. Here the user specifies a desired frequency response, a weighting function for errors from this response, and a filter order N. The algorithm then finds the set of (N \+ 1) coefficients that minimize the maximum deviation from the ideal. Intuitively, this finds the filter that is as close as you can get to the desired response given that you can use only (N \+ 1) coefficients. This method is particularly easy in practice since at least one text[1] includes a program that takes the desired filter and N, and returns the optimum coefficients.

Software packages like MATLAB, GNU Octave and Scilab provide convenient ways
to apply these different methods.

Some of the time, the filter specifications refer to the time-domain shape of
the input signal the filter is expected to "recognize". The optimum matched
filter is to sample that shape and use those samples directly as the
coefficients of the filter -- giving the filter an impulse response that is
the time-reverse of the expected input signal.

## [edit] Moving average example

<IMG>

Block diagram of a simple FIR filter (2nd order/3-tap filter in this case,
implementing a moving average)

A moving average filter is a very simple FIR filter. The filter coefficients
are found via the following equation:

    b_{i}=\\frac{1}{N+1}  for i=0,1,\\dots,N
To provide a more specific example, we select the filter order:

    \\ N=2
The impulse response of the resulting filter is:

    h\[n\]=\\frac{1}{3}\\delta\[n\]+\\frac{1}{3}\\delta\[n-1\]+\\frac{1}{3}\\delta\[n-2\]
The following figure shows the block diagram of such a second-order moving-
average filter.

To discuss stability and spectral topics we take the z-transform of the
impulse response:

    H\(z\)=\\frac{1}{3}+\\frac{1}{3}z^{-1}+\\frac{1}{3}z^{-2}=\\frac{1}{3}\\frac{z^{2}+z+1}{z^{2}}
The following figure shows the pole-zero diagram of the filter. Two poles are
located at the origin, and two zeros are located at
z_{1}=-\\frac{1}{2}+j\\frac{\\sqrt{3}}{2},
z_{2}=-\\frac{1}{2}-j\\frac{\\sqrt{3}}{2}

Pole-Zero Diagram

The frequency response, for frequency Ï in radians per sample, is:

    H\(e^{j\\omega}\)=\\frac{1}{3}+\\frac{1}{3}e^{-j\\omega}+\\frac{1}{3}e^{-j2\\omega}
The following figure shows the absolute value of the frequency response.
Clearly, the moving-average filter passes low frequencies with a gain near 1,
and attenuates high frequencies. This is a typical low-pass filter
characteristic. Frequencies above Ï are aliases of the frequencies below Ï,
and are generally ignored or filtered out if reconstructing a continuous-time
signal.

    Amplitude response
The following figure shows the phase response.

    Phase response
## [edit] See also

  * Electronic filter
  * Filter (signal processing)
  * Infinite impulse response (IIR) filter
  * Z-transform (specifically Z-transform#Linear_constant-coefficient_difference_equation)
  * Filter design
  * Cascaded Integrator-Comb Filter

## [edit] References

  1. ^ Rabiner, Lawrence R., and Gold, Bernard, 1975: Theory and Application of Digital Signal Processing (Englewood Cliffs, New Jersey: Prentice-Hall, Inc.) ISBN 0139141014

## [edit] External links

  * FIR FAQ
  * BruteFIR; Software for applying long FIR filters to multi-channel digital audio, either offline or in realtime.
  * Freeverb3 Reverb Impulse Response Processor
  * FIR filter design
  * An n-tap FIR filter written in VHDL

Retrieved from "http://en.wikipedia.org/wiki/Finite_impulse_response"

Categories: Digital signal processing | Filter theory

Hidden categories: Wikipedia articles needing style editing from January 2008
| All articles needing style editing

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Dansk
  * Deutsch
  * EspaÃ±ol
  * FranÃ§ais
  * Galego
  * Italiano
  * æ¥æ¬èª
  * Nederlands
  * Polski
  * PortuguÃªs
  * Ð ÑÑÑÐºÐ¸Ð¹
  * Svenska
  * ä¸­æ

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 1 April 2009, at 08:25.
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



