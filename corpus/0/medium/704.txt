
# SKI combinator calculus

### From Wikipedia, the free encyclopedia

Jump to: navigation, search

Merge arrow

It has been suggested that this article or section be merged into Combinatory
logic. (Discuss)  
SKI combinator calculus is a computational system that is a reduced, untyped
version of Lambda calculus.

All operations in Lambda calculus are expressed in SKI as binary trees whose
leaves are one of the three symbols S, K, and I (called combinators). In fact,
the symbol I is added only for convenience, and just the other two suffice for
all of the purposes of the SKI system.

Although the most formal representation of the objects in this system requires
binary trees, they are usually represented, for typesettability, as
parenthesized expressions, either with all the subtrees parenthesized, or only
the right-side children subtrees parenthesized. So, the tree whose left
subtree is the tree KS and whose right subtree is the tree SK is usually typed
as ((KS)(SK)), or more simply as KS(SK), instead of being fully drawn as a
tree (as formality and readability would require).

## Contents

  * 1 Informal description
  * 2 Formal definition
  * 3 SKI expressions
    * 3.1 Self-application and recursion
    * 3.2 The reversal expression
    * 3.3 Boolean logic
    * 3.4 Intuitionistic logic
  * 4 See also
  * 5 References
  * 6 External links

  
## [edit] Informal description

Informally, and using programming language jargon, a tree (xy) can be thought
of as a "function" x applied to an "argument" y. When "evaluated" (i.e., when
the function is "applied" to the argument), the tree "returns a value". i.e.,
transforms into another tree. Of course, all three of the "function", the
"argument" and the "value" are either combinators, or binary trees, and if
they are binary trees they too may be thought of as functions whenever the
need arises.

The evaluation operation is defined as follows:

(x, y, and z represent expressions made from the functions S, K, and I, and
set values):

I returns its argument:

    Ix â x
K, when applied to any argument x, yields a one-argument constant function Kx
, which, when applied to any argument, returns x:

    Kxy â x
S is a substitution operator. It takes three arguments and then returns the
first argument applied to the third, which is then applied to the result of
the second argument applied to the third. More clearly:

    Sxyz â xz(yz)
Example computation: SKSK evaluates to KK(SK) by the S-rule. Then if we
evaluate KK(SK), we get K by the K-rule. As no further rule can be applied,
the computation halts here.

Note that, for all trees x and all trees y, SKxy will always evaluate to y in
two steps, and the ultimate result of evaluating SKxy will always equal the
result of evaluating y. We say that SKx and I are "functionally equivalent"
because they always yield the same result when applied to any y.

Note that from these definitions it can be shown that SKI calculus is not the
minimum system that can fully perform the computations of Lambda calculus, as
all occurrences of I in any expression can be replaced by (SKK) or (SKS) or (S
K whatever) and the resulting expression will yield the same result. So the
"I" is merely syntactic sugar.

In fact, it is possible to define a complete system using only one combinator.
An example is Chris Barker's iota combinator, defined as follows:

    Î¹x = xSK
## [edit] Formal definition

The terms and derivations in this system can also be more formally defined:

Terms: The set T of terms is defined recursively by the following rules.

  1. S, K, and I are terms.
  2. If Ï1 and Ï2 are terms, then (Ï1Ï2) is a term.
  3. Nothing is a term if not required to be so by the first two rules.

Derivations: A derivation is a finite sequence of terms defined recursively by
the following rules (where all Greek letters represent valid terms or
expressions with fully balanced parentheses):

  1. If Î is a derivation ending in an expression of the form Î±(IÎ²)Î¹, then Î followed by the term Î±Î²Î¹ is a derivation.
  2. If Î is a derivation ending in an expression of the form Î±((KÎ²)Î³)Î¹, then Î followed by the term Î±Î²Î¹ is a derivation.
  3. If Î is a derivation ending in an expression of the form Î±(((SÎ²)Î³)Î´)Î¹, then Î followed by the term Î±((Î²Î´)(Î³Î´))Î¹ is a derivation.

Assuming a sequence is a valid derivation to begin with, it can be extended
using these rules. [1]

## [edit] SKI expressions

### [edit] Self-application and recursion

SII is an expression that takes an argument and applies that argument to
itself:

    SIIÎ± â IÎ±(IÎ±) â Î±Î±
One interesting property of this is that it makes the expression SII(SII)
irreducible:

    SII(SII) â I(SII)(I(SII)) â I(SII)(SII) â SII(SII)
Another thing that results from this is that it allows you to write a function
that applies something to the self application of something else:

    (S(KÎ±)(SII))Î² â KÎ±Î²(SIIÎ²) â Î±(SIIÎ²) â Î±(Î²Î²)
This function can be used to achieve recursion. If Î² is the function that
applies Î± to the self application of something else, then self-applying Î²
performs Î± recursively on Î²Î². More clearly, if:

    Î² = S(KÎ±)(SII)
then:

    SIIÎ² â Î²Î² â Î±(Î²Î²) â Î±(Î±(Î²Î²)) â â¦
### [edit] The reversal expression

S(K(SI))K reverses the following two terms:

    S(K(SI))KÎ±Î² â
    K(SI)Î±(KÎ±)Î² â
    SI(KÎ±)Î² â
    IÎ²(KÎ±Î²) â
    IÎ²Î± â Î²Î±
### [edit] Boolean logic

SKI combinator calculus can also implement Boolean logic in the form of an if-
then-else structure. An if-then-else structure consists of a Boolean
expression that is either T (True) or F (False) and two arguments, such that:

    Txy â x
and

    Fxy â y
The key is in defining the two Boolean expressions. The first works just like
one of our basic combinators:

    T = K
    Kxy â x
The second is also fairly simple:

    F = KI
    KIxy â Iy â y
Once True and False are defined, all Boolean logic can be implemented in terms
of if-then-else structures.

Boolean NOT (which returns the opposite of a given boolean) works the same as
the if-then-else structure, with False and True as the second and third
values, so it can be implemented as a postfix operation:

    NOT = (F)(T) = (KI)(K)
If this is put in an if-then-else structure, it can be shown that this has the
expected result

    (T)NOT=T(F)(T)=F
    (F)NOT=F(F)(T)=T
Boolean OR (which returns True if either of the two Boolean values surrounding
it is True) works the same as an if-then-else structure with True as the
second value, so it can be implemented as an infix operation:

    OR = T = K
If this is put in an if-then-else structure, it can be shown that this has the
expected result:

    (T)OR(T)=T(T)(T)=T
    (T)OR(F)=T(T)(F)=T
    (F)OR(T)=F(T)(T)=T
    (F)OR(F)=F(T)(F)=F
Boolean AND (which returns True if both of the two Boolean values surrounding
it are True) works the same as an if-then-else structure with False as the
third value, so it can be implemented as a postfix operation:

    AND = F = KI
If this is put in an if-then-else structure, it can be shown that this has the
expected result:

    (T)(T)AND=T(T)(F)=T
    (T)(F)AND=T(F)(F)=F
    (F)(T)AND=F(T)(F)=F
    (F)(F)AND=F(F)(F)=F
Because this defines True, False, NOT (as a postfix operator), OR (as an infix
operator), and AND (as a postfix operator) in terms of SKI notation, this
proves that the SKI system can fully express Boolean logic.

### [edit] Intuitionistic logic

The combinators K and S correspond to two well-known axioms of sentential
logic:

AK: A â (B â A),  
AS: (A â (B â C)) â ((A â B) â (A â C)).

Function application corresponds to the rule modus ponens:

MP: from A and A â B infer B.

The axioms AK and AS, and the rule MP are complete for the implicational
fragment of intuitionistic logic. In order for combinatory logic to have as a
model:

  * The implicational fragment of classical logic, would require the combinatory analog to the law of excluded middle, e.g., Peirce's law;
  * Complete classical logic, would require the combinatory analog to the sentential axiom F â A.

## [edit] See also

  * Combinatory logic
  * B,C,K,W system
  * Fixed point combinator
  * Lambda calculus
  * Functional programming
  * Unlambda programming language
  * To Mock a Mockingbird

## [edit] References

  * Smullyan, Raymond, 1985. To Mock a Mockingbird. Knopf. ISBN 0-394-53491-3. A gentle introduction to combinatory logic, presented as a series of recreational puzzles using bird watching metaphors.
  * \--------, 1994. Diagonalization and Self-Reference. Oxford Univ. Press. Chpts. 17-20 are a more formal introduction to combinatory logic, with a special emphasis on fixed point results.

## [edit] External links

  * O'Donnell, Mike "The SKI Combinator Calculus as a Universal System."
  * Keenan, David C. (2001) "To Dissect a Mockingbird."
  * Rathman, Chris, "Combinator Birds."
  * ""Drag 'n' Drop Combinators (Java Applet)."

Retrieved from "http://en.wikipedia.org/wiki/SKI_combinator_calculus"

Categories: Lambda calculus | Combinatory logic

Hidden categories: All articles to be merged | Articles to be merged since
January 2008

##### Views

  * Article
  * Discussion
  * Edit this page
  * History

##### Personal tools

  * Log in / create account

##### Navigation

  * Main page
  * Contents
  * Featured content
  * Current events
  * Random article

##### Search



##### Interaction

  * About Wikipedia
  * Community portal
  * Recent changes
  * Contact Wikipedia
  * Donate to Wikipedia
  * Help

##### Toolbox

  * What links here
  * Related changes
  * Upload file
  * Special pages
  * Printable version
  * Permanent link
  * Cite this page

##### Languages

  * Hrvatski
  * ä¸­æ

Powered by MediaWiki

Wikimedia Foundation

  * This page was last modified on 30 December 2008, at 23:32 (UTC).
  * All text is available under the terms of the GNU Free Documentation License. (See Copyrights for details.)   
Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a U.S.
registered 501(c)(3) tax-deductible nonprofit charity.  

  * Privacy policy
  * About Wikipedia
  * Disclaimers



